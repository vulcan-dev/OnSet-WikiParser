{
    "server": {
        "AddServerScript": {
            "params": [
                {
                    "name": "file",
                    "description": "The server script to register. Wildcards (*) are supported."
                }
            ],
            "description": "Registers a server script to this packag",
            "syntax": "AddServerScript(file)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.1"
            },
            "category": "index.lua"
        },
        "AddClientScript": {
            "params": [
                {
                    "name": "file",
                    "description": "The client script to register. Wildcards (*) are supported."
                }
            ],
            "description": "Registers a client script to this packag",
            "syntax": "AddClientScript(file)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.1"
            },
            "category": "index.lua"
        },
        "AddSharedScript": {
            "params": [
                {
                    "name": "file",
                    "description": "The shared script to register. Wildcards (*) are supported."
                }
            ],
            "description": "Registers a shared script (runs on the server and client) to this packag",
            "syntax": "AddSharedScript(file)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.1"
            },
            "category": "index.lua"
        },
        "AddFile": {
            "params": [
                {
                    "name": "file",
                    "description": "The client file to register. Wildcards (*) are supported."
                }
            ],
            "description": "Registers a (client) file to this packag",
            "syntax": "AddFile(file)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.1"
            },
            "category": "index.lua"
        },
        "AddWebUIWhitelist": {
            "params": [
                {
                    "name": "domain",
                    "description": "The domain to whitelist. Example: vimeo.com"
                }
            ],
            "description": "Adds a domain to the remote WebUI whitelist. Only domain names with a top level domain (TLD) can be whiteliste",
            "syntax": "AddWebUIWhitelist(domain)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.2"
            },
            "category": "Game"
        },
        "GetServerPath": {
            "params": [],
            "description": "Gets the absolute path to the server executable.",
            "syntax": "GetServerPath()",
            "return": "Returns the absolute path to the server as a string",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Miscellaneous"
        },
        "GetFilesInDirectory": {
            "params": [
                {
                    "name": "Path",
                    "description": "Path as a string from where to get the file names."
                },
                {
                    "name": "bRecursive",
                    "description": "Whether to get files form subdirectores as well. Default: '''false'''"
                }
            ],
            "description": "Gets the files in a specific directory.",
            "syntax": "GetFilesInDirectory(Path, bRecursive)",
            "return": "Returns the file names in a table.",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Miscellaneous"
        },
        "GetDirectoriesInDirectory": {
            "params": [
                {
                    "name": "Path",
                    "description": "Path as a string from where to get the directory names."
                },
                {
                    "name": "bRecursive",
                    "description": "Whether to get directories form subdirectores as well. Default: '''false'''"
                }
            ],
            "description": "Gets the directories in a specific directory.",
            "syntax": "GetDirectoriesInDirectory(Path, bRecursive)",
            "return": "Returns the directory names in a table.",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Miscellaneous"
        },
        "Base64Encode": {
            "params": [
                {
                    "name": "text",
                    "description": "the text."
                }
            ],
            "description": "Encodes the specified text in the Base64 format.",
            "syntax": "Base64Encode(text)",
            "return": "",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "Base64Decode": {
            "params": [
                {
                    "name": "base64",
                    "description": "The base64 string."
                }
            ],
            "description": "Decodes the Base64 into text.",
            "syntax": "Base64Decode(base64)",
            "return": "Text string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "GetGameVersion": {
            "params": [],
            "description": "Returns the server/ client's game version",
            "syntax": "GetGameVersion()",
            "return": "Returns the server/ client's game version as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Game"
        },
        "GetGameVersionString": {
            "params": [],
            "description": "Returns the server/ client's game version as a string.",
            "syntax": "GetGameVersionString()",
            "return": "Returns the game version as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Game"
        },
        "IsServer": {
            "params": [],
            "description": "Used to check if a script currently runs on the server.",
            "syntax": "IsServer()",
            "return": "Returns '''true''' on the server and '''false''' on the client.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.4.0"
            },
            "category": "Game"
        },
        "IsClient": {
            "params": [],
            "description": "Used to check if a script currently runs on the client.",
            "syntax": "IsClient()",
            "return": "Returns '''true''' on the client and '''false''' on the server.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.4.0"
            },
            "category": "Game"
        },
        "RGBA": {
            "params": [
                {
                    "name": "r",
                    "description": "The red"
                },
                {
                    "name": "g",
                    "description": "The green"
                },
                {
                    "name": "b",
                    "description": "The blue"
                },
                {
                    "name": "a",
                    "description": "The alpha opacity"
                }
            ],
            "description": "Converts RGBA to an integer. All values (including alpha) must be between 0 to 255. ",
            "syntax": "RGBA(r, g, b, a)",
            "return": "Returns the color as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Colors"
        },
        "RGB": {
            "params": [
                {
                    "name": "r",
                    "description": "The red"
                },
                {
                    "name": "g",
                    "description": "The green"
                },
                {
                    "name": "b ",
                    "description": "The blue"
                }
            ],
            "description": "Converts RGB to an integer. All values (including alpha) must be between 0 to 255.",
            "syntax": "RGB(r, g, b [, a])",
            "return": "Returns the color as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Colors"
        },
        "HexToRGBA": {
            "params": [
                {
                    "name": "HexColor",
                    "description": "Color in integer format"
                }
            ],
            "description": "Converts an integer color value to the RGB format.",
            "syntax": "HexToRGBA(HexColor)",
            "return": "R, G, B, A values between 0 and 255",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Colors"
        },
        "HexToRGBAFloat": {
            "params": [
                {
                    "name": "HexColor",
                    "description": "Hex color in float format."
                }
            ],
            "description": "Converts Hex color value into RGBA float. Useful for FLinearColor.",
            "syntax": "HexToRGBAFloat(HexColor)",
            "return": "R, G, B, A values between 0.0 and 1.0",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Colors"
        },
        "Random": {
            "params": [],
            "description": "Get a pseudo-random number. Negative ranges are supported as of v1.0.2.",
            "syntax": "Random([Min, Max])",
            "return": "Returns the random between the range.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "RandomFloat": {
            "params": [],
            "description": "Get a pseudo-random float. Negative ranges are supported as of v1.0.2.",
            "syntax": "RandomFloat([, Min, Max])",
            "return": "Returns the random float between the range.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "GetDistance2D": {
            "params": [
                {
                    "name": "x",
                    "description": "x of the first point."
                },
                {
                    "name": "y",
                    "description": "y of the first point."
                },
                {
                    "name": "x2",
                    "description": "x of the second point."
                },
                {
                    "name": "y2",
                    "description": "y of the second point."
                }
            ],
            "description": "Calculates the distance between 2 points.",
            "syntax": "GetDistance2D(x, y, x2, y2)",
            "return": "The distance between the 2 points.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "GetDistance3D": {
            "params": [
                {
                    "name": "x",
                    "description": "x of the first point."
                },
                {
                    "name": "y",
                    "description": "y of the first point."
                },
                {
                    "name": "z",
                    "description": "z of the first point."
                },
                {
                    "name": "x2",
                    "description": "x of the second point."
                },
                {
                    "name": "y2",
                    "description": "y of the second point."
                },
                {
                    "name": "z2",
                    "description": "z of the second point."
                }
            ],
            "description": "Gets the distance in centimeters between 3 dimensional points.",
            "syntax": "GetDistance3D(x, y, z, x2, y2, z2)",
            "return": "The distance between the 2 points in centimeters.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "Lerp": {
            "params": [
                {
                    "name": "t",
                    "description": "The interpolant, normally between 0.0 and 1.0"
                },
                {
                    "name": "a",
                    "description": "Interpolate from."
                },
                {
                    "name": "b",
                    "description": "Interpolate to."
                }
            ],
            "description": "Interpolates between a and b with the parameter t. ",
            "syntax": "Lerp(t, a, b)",
            "return": "Returns the interpolated value.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0.3"
            },
            "category": "Miscellaneous"
        },
        "LerpVector": {
            "params": [
                {
                    "name": "t",
                    "description": "The interpolant, normally between 0.0 and 1.0"
                },
                {
                    "name": "aX",
                    "description": "Interpolate from X."
                },
                {
                    "name": "aY",
                    "description": "Interpolate from Y."
                },
                {
                    "name": "aZ",
                    "description": "Interpolate from Z."
                },
                {
                    "name": "bX",
                    "description": "Interpolate to X."
                },
                {
                    "name": "bY",
                    "description": "Interpolate to Y."
                },
                {
                    "name": "bZ",
                    "description": "Interpolate to Z."
                }
            ],
            "description": "Interpolates between vector A and vector B with the parameter t. ",
            "syntax": "LerpVector(t, aX, aY, aZ, bX, bY, bZ)",
            "return": "Returns the interpolated vector (3 floats).",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0.3"
            },
            "category": "Miscellaneous"
        },
        "AddCommand": {
            "params": [
                {
                    "name": "CommandName",
                    "description": "The specified command name. Command names are always lower case."
                },
                {
                    "name": "LuaFunction",
                    "description": "The function name."
                }
            ],
            "description": "Adds a command that can be executed with the prefix '''/'''.",
            "syntax": "AddCommand(CommandName, LuaFunction)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "AddFunctionExport": {
            "params": [
                {
                    "name": "ExportName",
                    "description": "Name of the export. Commonly the name of the exported function."
                },
                {
                    "name": "ExportFunction",
                    "description": "Function to export."
                }
            ],
            "description": "Exports a function that can later be imported from another package.",
            "syntax": "AddFunctionExport(ExportName, ExportFunction)",
            "return": "Returns '''true''' on success. Return '''false''' if the export already exists.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Miscellaneous"
        },
        "SteamId64ToSteamId3": {
            "params": [
                {
                    "name": "SteamId64",
                    "description": "SteamId64 (int)"
                }
            ],
            "description": "Converts a SteamId64 to SteamId3.",
            "syntax": "SteamId64ToSteamId3(SteamId64)",
            "return": "Returns SteamId3 (string).",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Miscellaneous"
        },
        "SteamId3ToSteamId64": {
            "params": [
                {
                    "name": "SteamId3",
                    "description": "SteamId3 (string)"
                }
            ],
            "description": "Converts a SteamId3 to SteamId64 (dec).",
            "syntax": "SteamId3ToSteamId64(SteamId3)",
            "return": "Return SteamId64 (dec).",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Miscellaneous"
        },
        "GetTimeSeconds": {
            "params": [],
            "description": "Returns the amount of time since the game or server started up.",
            "syntax": "GetTimeSeconds()",
            "return": "Returns a float value of the amount of time passed since the server started.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Time"
        },
        "GetDeltaSeconds": {
            "params": [],
            "description": "Gets the time between game ticks/frames.",
            "syntax": "GetDeltaSeconds()",
            "return": "Returns the delta time between the last game ticks/frames.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Time"
        },
        "GetTickCount": {
            "params": [],
            "description": "Returns the uptime of the actual computer (not the Onset application) in milliseconds.",
            "syntax": "GetTickCount()",
            "return": "Uptime of the actual computer (not the Onset application)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Time"
        },
        "GetServerTickRate": {
            "params": [],
            "description": "Tick rate of the main thread. The rate is variable and depends on the load of the server. For an empty server this is between 500Hz and 1000Hz. For 300 concurrent players the tick rate should be above 150Hz.",
            "syntax": "GetServerTickRate()",
            "return": "Returns a float of the tick rate.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Server"
        },
        "ServerExit": {
            "params": [],
            "description": "Shutdowns the server.",
            "syntax": "ServerExit([, ExitMessage])",
            "return": "This function doesn't have a return value.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Server"
        },
        "SetServerName": {
            "params": [
                {
                    "name": "ServerName",
                    "description": "The name of the server."
                }
            ],
            "description": "Sets the display name of the server.",
            "syntax": "SetServerName(ServerName)",
            "return": "This function doesn't return a value.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Server"
        },
        "GetServerName": {
            "params": [],
            "description": "Gets the servers display name.",
            "syntax": "GetServerName()",
            "return": "The name of the server",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Server"
        },
        "GetMaxPlayers": {
            "params": [],
            "description": "Gets the player slots count",
            "syntax": "GetMaxPlayers()",
            "return": "Returns the player slots count.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Server"
        },
        "CreateExplosion": {
            "params": [
                {
                    "name": "explosionid",
                    "description": "The explosion id from 1-20."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z ",
                    "description": "The Z axis"
                }
            ],
            "description": "Creates an explosion at the specified coordinates.",
            "syntax": "CreateExplosion(explosionid, x, y, z [, dimension, soundExplosion, camShakeRadius, radialForce, damageRadius])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Explosion"
        },
        "IsValidDoor": {
            "params": [
                {
                    "name": "door",
                    "description": "The dooridentifier to check."
                }
            ],
            "description": "Checks whether a given door identifier is a valid door.",
            "syntax": "IsValidDoor(door)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "CreateDoor": {
            "params": [
                {
                    "name": "modelid",
                    "description": "The door from this list: [[Doors]]."
                },
                {
                    "name": "x",
                    "description": "World X location."
                },
                {
                    "name": "y",
                    "description": "World Y location."
                },
                {
                    "name": "z",
                    "description": "World Z location."
                },
                {
                    "name": "rotation",
                    "description": "Yaw rotation of the door."
                }
            ],
            "description": "Creates stateful doors which can be interacted with by players by pressing 'E'. Some of them are physics doors meaning they are pushed open by running against the",
            "syntax": "CreateDoor(modelid, x, y, z, rotation [, bEnableInteract])",
            "return": "Returns the identifier to the door.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "DestroyDoor": {
            "params": [
                {
                    "name": "door",
                    "description": "The door to destroy."
                }
            ],
            "description": "Destroys a door that was earlier created by [[CreateDoor]].",
            "syntax": "DestroyDoor(door)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "SetDoorOpen": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                },
                {
                    "name": "bOpen",
                    "description": "'''true''' to open the door, '''false''' to close it."
                }
            ],
            "description": "Opens or closes a door. This is networked so every player will see the same.",
            "syntax": "SetDoorOpen(door, bOpen)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "IsDoorOpen": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                }
            ],
            "description": "Checks the door state.",
            "syntax": "IsDoorOpen(door)",
            "return": "Returns '''true''' if the door is open, '''false''' if closed.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetAllDoors": {
            "params": [],
            "description": "Get all doors as a table. Useful for loops.",
            "syntax": "GetAllDoors()",
            "return": "Returns a table of all doors.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetDoorCount": {
            "params": [],
            "description": "Returns the number of doors.",
            "syntax": "GetDoorCount()",
            "return": "Returns the number of doors.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetDoorModel": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                }
            ],
            "description": "Gets the model of a door. It's the same number that was passed to [[CreateDoor]].",
            "syntax": "GetDoorModel(door)",
            "return": "Returns the model of a door.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "SetDoorLocation": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                },
                {
                    "name": "x",
                    "description": "World X location."
                },
                {
                    "name": "y",
                    "description": "World Y location."
                },
                {
                    "name": "z",
                    "description": "World Z location."
                },
                {
                    "name": "rotation",
                    "description": "The yaw rotation of this door."
                }
            ],
            "description": "Teleports a door to a specified location.",
            "syntax": "SetDoorLocation(door, x, y, z, rotation)",
            "return": "Returns '''true''' on success. '''false''' if the door does not exist.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetDoorLocation": {
            "params": [
                {
                    "name": "door",
                    "description": "The door specifier"
                }
            ],
            "description": "Gets the XYZA vector of the specified door created earlier with [[CreateDoor]].",
            "syntax": "GetDoorLocation(door)",
            "return": "the x, y, z and yaw vectors of the door location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "SetDoorDimension": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The door identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this door. Players can only see doors in the same dimension",
            "syntax": "SetDoorDimension(door, dimension)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetDoorDimension": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                }
            ],
            "description": "Gets the dimension of this door.",
            "syntax": "GetDoorDimension(door)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Door"
        },
        "GetDoorPropertyValue": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "GetDoorPropertyValue(door, PropertyName)",
            "return": "Returns '''propertyName''''s  value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.1.0"
            },
            "category": "Door"
        },
        "SetDoorPropertyValue": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetDoorPropertyValue(door, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.1.0"
            },
            "category": "Door"
        },
        "GetNetworkStats": {
            "params": [],
            "description": "Gets the clients' NetworkStats",
            "syntax": "GetNetworkStats()",
            "return": "packetlossTotal, packetlossLastSecond, messagesInResendBuffer, bytesInResendBuffer, bytesSend, bytesReceived, bytesResent, bytesSendTotal, bytesReceivedTotal, bytesResentTotal, isLimitedByCongestionControl, isLimitedByOutgoingBandwidthLimit",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Network"
        },
        "SetNPCRagdoll": {
            "params": [
                {
                    "name": "npcid",
                    "description": "The NPC identifier."
                },
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable."
                }
            ],
            "description": "Set the NPC's ragdoll status.",
            "syntax": "SetNPCRagdoll(npcid, bEnable)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCDimension": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this npc. Players can only see npcs in the same dimension",
            "syntax": "SetNPCDimension(npc, dimension)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCDimension": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier."
                }
            ],
            "description": "Gets the dimension of this npc.",
            "syntax": "GetNPCDimension(npc)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCPropertyValue": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetNPCPropertyValue(npc, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCPropertyValue": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetNPCPropertyValue(npc, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "CreateNPC": {
            "params": [
                {
                    "name": "x",
                    "description": "X location"
                },
                {
                    "name": "y",
                    "description": "Y location"
                },
                {
                    "name": "z",
                    "description": "Z location"
                },
                {
                    "name": "h",
                    "description": "Heading of the npc"
                }
            ],
            "description": "Creates a NPC.",
            "syntax": "CreateNPC(x, y, z, h)",
            "return": "The NPC identifier",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "DestroyNPC": {
            "params": [
                {
                    "name": "npc",
                    "description": "NPC You want to destroy/remove"
                }
            ],
            "description": "Destroy/remove any NPC by its identifier.",
            "syntax": "DestroyNPC(npc)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "IsValidNPC": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Check if specified NPC is valid or not.",
            "syntax": "IsValidNPC(npc)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetAllNPC": {
            "params": [],
            "description": "Gets all the NPC IDs in a table.",
            "syntax": "GetAllNPC()",
            "return": "Returns a table with a list of NPC IDs.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCCount": {
            "params": [],
            "description": "Get the number of spawned NPCs.",
            "syntax": "GetNPCCount()",
            "return": "Returns the NPC count.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "IsNPCStreamedIn": {
            "params": [
                {
                    "name": "player",
                    "description": "Player which you want to check"
                },
                {
                    "name": "npc",
                    "description": "NPC which you want to check"
                }
            ],
            "description": "Checks if stated NPC is streamed in for the player",
            "syntax": "IsNPCStreamedIn(player, npc)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCLocation": {
            "params": [
                {
                    "name": "npc",
                    "description": "NPC which you want to teleport"
                },
                {
                    "name": "x",
                    "description": "X coordinate"
                },
                {
                    "name": "y",
                    "description": "Y coordinate"
                },
                {
                    "name": "z",
                    "description": "Z coordinate"
                }
            ],
            "description": "Sets the location of this npc",
            "syntax": "SetNPCLocation(npc, x, y, z)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCLocation": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Get the NPC's location vectors.",
            "syntax": "GetNPCLocation(npc)",
            "return": "Returns the XYZ vectors of the NPC's location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCHealth": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                },
                {
                    "name": "health",
                    "description": "The health in floating point value."
                }
            ],
            "description": "Set the NPC health.",
            "syntax": "SetNPCHealth(npc, health)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCHealth": {
            "params": [
                {
                    "name": "npc",
                    "description": "NPC you want to get health of"
                }
            ],
            "description": "Returns NPC's health by its identifier.",
            "syntax": "GetNPCHealth(npc)",
            "return": "The NPC health as a floating point number.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCAnimation": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier you get from [[CreateNPC]]"
                },
                {
                    "name": "animation",
                    "description": "The animation name as a string or integer, see [[AnimationList]]."
                },
                {
                    "name": "loop",
                    "description": "'''true''' to loop the animation, '''false''' to play it a single time."
                }
            ],
            "description": "Plays an animation on an NPC.",
            "syntax": "SetNPCAnimation(npc, animation, loop)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCHeading": {
            "params": [
                {
                    "name": "npc",
                    "description": "The Npc identifier."
                },
                {
                    "name": "heading",
                    "description": "The heading in floats."
                }
            ],
            "description": "Set's the specified NPC's heading (rotation).",
            "syntax": "SetNPCHeading(npc, heading)",
            "return": "This function '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "GetNPCHeading": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier"
                }
            ],
            "description": "Get the specified NPC's heading (rotation).",
            "syntax": "GetNPCHeading(npc)",
            "return": "Returns the heading",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCTargetLocation": {
            "params": [
                {
                    "name": "npc",
                    "description": "The Npc identifier"
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z ",
                    "description": "The Z axis"
                }
            ],
            "description": "Set the NPC's target location where it should go towards to.",
            "syntax": "SetNPCTargetLocation(npc, x, y, z [, speed])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCFollowPlayer": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                },
                {
                    "name": "player ",
                    "description": "The player identifier."
                }
            ],
            "description": "Set a NPC to follow the specified player.",
            "syntax": "SetNPCFollowPlayer(npc, player [, speed])",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetNPCFollowVehicle": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                },
                {
                    "name": "vehicle ",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Make a NPC follow the vehicle.",
            "syntax": "SetNPCFollowVehicle(npc, vehicle [, speed])",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "NPC"
        },
        "SetObjectDimension": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this object. Players can only see objects in the same dimension",
            "syntax": "SetObjectDimension(object, dimension)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectDimension": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the dimension of this object.",
            "syntax": "GetObjectDimension(object)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectPropertyValue": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetObjectPropertyValue(object, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectPropertyValue": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetObjectPropertyValue(object, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "CreateObject": {
            "params": [
                {
                    "name": "modelid",
                    "description": "The [[Objec"
                },
                {
                    "name": "x",
                    "description": "X coordinate"
                },
                {
                    "name": "y",
                    "description": "Y coordinate"
                },
                {
                    "name": "z",
                    "description": "Z coordinate"
                }
            ],
            "description": "This function creates an object at a desired location. See [[Objects]] for a list of models.",
            "syntax": "CreateObject(modelid, x, y, z [, rx, ry, rz, sx, sy, sz])",
            "return": "Returns an identifier to the new object. '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "DestroyObject": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Destroy an object created with [[CreateObject]].",
            "syntax": "DestroyObject(object)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "IsValidObject": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Check if the specified object is valid or not.",
            "syntax": "IsValidObject(object)",
            "return": "Returns '''true''' if the object exists..",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectCount": {
            "params": [],
            "description": "Get the number of spawned object instances from [[CreateObject]].",
            "syntax": "GetObjectCount()",
            "return": "Returns total object count.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectModel": {
            "params": [
                {
                    "name": "objectid",
                    "description": "The object identifier."
                },
                {
                    "name": "modelid",
                    "description": "The [[Objec"
                }
            ],
            "description": "This function changes the model of the created object.  This function calls [[OnObjectModelChange]] event on client side.",
            "syntax": "SetObjectModel(objectid, modelid)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.1.0"
            },
            "category": "Object"
        },
        "GetObjectModel": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Get the object model number ob a spawned object. See [[Objects]].",
            "syntax": "GetObjectModel(object)",
            "return": "Returns the object model number as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "IsObjectStreamedIn": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Check whether the specified object is streamed in or not for the player.",
            "syntax": "IsObjectStreamedIn(player, object)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "EnableObjectStreamEvents": {
            "params": [
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable, '''false''' to disable."
                }
            ],
            "description": "Enables or disables StreamIn/Out events for objects. Disabled by default.",
            "syntax": "EnableObjectStreamEvents(bEnable)",
            "return": "This function returns noting.",
            "info": {
                "context": "Server",
                "introduced": "1.5.0"
            },
            "category": "Object"
        },
        "SetObjectStreamDistance": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "distance",
                    "description": "The stream distance. The distance can not be greater than the global stream distance."
                }
            ],
            "description": "Set the specified object's stream distance. The distance can not be greater than the global stream distance. If you like to view objects from far away you can spawn them on client.",
            "syntax": "SetObjectStreamDistance(object, distance)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectLocation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Change the specified object's location.",
            "syntax": "SetObjectLocation(object, x, y, z)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectLocation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Returns the object's XYZ location.",
            "syntax": "GetObjectLocation(object)",
            "return": "The XYZ vector of the object.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectRotation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "rx",
                    "description": "The rotation X axis"
                },
                {
                    "name": "ry",
                    "description": "The rotation Y axis"
                },
                {
                    "name": "rz",
                    "description": "The rotation Z axis"
                }
            ],
            "description": "Set the specified object's rotation.",
            "syntax": "SetObjectRotation(object, rx, ry, rz)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectRotation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the object rotation.",
            "syntax": "GetObjectRotation(object)",
            "return": "Returns 3 float values: pitch, yaw and roll",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectScale": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "sx",
                    "description": "The scale X axis"
                },
                {
                    "name": "sy",
                    "description": "The scale Y axis"
                },
                {
                    "name": "sz",
                    "description": "The scale Z axis"
                }
            ],
            "description": "Set's the size scaling of the object.",
            "syntax": "SetObjectScale(object, sx, sy, sz)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectScale": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the object scale.",
            "syntax": "GetObjectScale(object)",
            "return": "Returns 3 float values: X, Y and Z scale",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectAttached": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier from [[CreateObject]]."
                },
                {
                    "name": "attachtype",
                    "description": "[[AttachType]]"
                },
                {
                    "name": "attachid",
                    "description": "The identifier of the other entity you want to attach to."
                },
                {
                    "name": "x",
                    "description": "Relative X location."
                },
                {
                    "name": "y",
                    "description": "Relative Y location."
                },
                {
                    "name": "z",
                    "description": "Relative Z location."
                }
            ],
            "description": "Attaches an object to another entit",
            "syntax": "SetObjectAttached(object, attachtype, attachid, x, y, z [, rx, ry, rz, SocketName])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectDetached": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Detach an already attached object.",
            "syntax": "SetObjectDetached(object)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "IsObjectAttached": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Check if the specified object is attached or not.",
            "syntax": "IsObjectAttached(object)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetObjectAttachmentInfo": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets information on this attached object.",
            "syntax": "GetObjectAttachmentInfo(object)",
            "return": "Returns two integers. First one being the attach type (ie ATTACH_VEHICLE, [[AttachType]]) and the second one the identifier to what this object is attached to. See [[SetObjectAttached]].",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "IsObjectMoving": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Check if an object is moving or not.",
            "syntax": "IsObjectMoving(object)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectMoveTo": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Set the object to move to the specified coordinates.",
            "syntax": "SetObjectMoveTo(object, x, y, z [, speed])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "StopObjectMove": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Stop an object that is moving.",
            "syntax": "StopObjectMove(object)",
            "return": "Returns '''true''' on successful stop.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "SetObjectRotateAxis": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Sets the object to rotate around its own axis.",
            "syntax": "SetObjectRotateAxis(object, x, y, z)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Object"
        },
        "GetAllObjects": {
            "params": [],
            "description": "Returns existing object ids in a table. If you have ten thousands of objects then don't call this too often.",
            "syntax": "GetAllObjects()",
            "return": "Returns a table with a list of all object ids.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "Object"
        },
        "ImportPackage": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "Name of the package to import. Must be loaded before this one."
                }
            ],
            "description": "Creates a table holding all exported functions by another packag",
            "syntax": "ImportPackage(PackageName)",
            "return": "Creates a table holding the other packages exported functions. Return '''nil''' if PackageName does not exist.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "StartPackage": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "The name of the package."
                }
            ],
            "description": "Starts a package at runtime. The game will automatically handle downloads for new client file",
            "syntax": "StartPackage(PackageName)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "StopPackage": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "The name of the package."
                }
            ],
            "description": "Stops a package during runtime. If a client downloads files from it, the download will be cancelled.",
            "syntax": "StopPackage(PackageName, Message)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "GetAllPackages": {
            "params": [],
            "description": "Returns the name of packages in a table.",
            "syntax": "GetAllPackages()",
            "return": "This function returns a table with package names.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "GetPackageFiles": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "The package name."
                }
            ],
            "description": "Returns all files that are registered with a specific package. See [[packages]].",
            "syntax": "GetPackageFiles(PackageName)",
            "return": "This function returns a table with the package files.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.4.0"
            },
            "category": "Package"
        },
        "GetPackageName": {
            "params": [],
            "description": "Get name of the package from where this function is called from.",
            "syntax": "GetPackageName()",
            "return": "Returns the package name as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "IsPackageStarted": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "The name of the package."
                }
            ],
            "description": "Checks whether a package is started.",
            "syntax": "IsPackageStarted(PackageName)",
            "return": "Returns '''true''' if the package is started.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Package"
        },
        "AddEvent": {
            "params": [
                {
                    "name": "EventName",
                    "description": "The name of the event. See [[Template:ServerEven"
                },
                {
                    "name": "LuaFunction ",
                    "description": "The function which will be called when the event occurs."
                }
            ],
            "description": "Adds a function as event handler which will be called when a certain event occurs. Multiple functions can be bound to a single even",
            "syntax": "AddEvent(EventName, LuaFunction)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Event"
        },
        "CallEvent": {
            "params": [
                {
                    "name": "EventName",
                    "description": "The event name."
                }
            ],
            "description": "The event to call by name. Will call events in all packages.",
            "syntax": "CallEvent(EventName [, UserArgs...])",
            "return": "This function has no specific return value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Event"
        },
        "AddRemoteEvent": {
            "params": [
                {
                    "name": "RemoteEventName",
                    "description": "The remote event name."
                },
                {
                    "name": "LuaFunction",
                    "description": "The lua function you want to call. Values you return from this function won't be transmitted to the originating CallRemoteEvent."
                }
            ],
            "description": "Register a remote event that can then be called from server to client or vice versa using [[CallRemoteEvent]]",
            "syntax": "AddRemoteEvent(RemoteEventName, LuaFunction)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Event"
        },
        "CallRemoteEvent": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier to call a remote event."
                },
                {
                    "name": "EventName",
                    "description": "The name of the remote event as a string which was explicit defined by [[AddRemoteEvent]]."
                }
            ],
            "description": "Calls a remote event on the remote machine. The server can call remote events for any connected player. Players (clients) can only call remote events on the server. Events are guaranteed to execute in the order sent. Keep in mind that it takes time to reach the remote machine as it's send over the network.<br>Remote events are independent of packages meaning you can call remote events across different packages.",
            "syntax": "CallRemoteEvent(player, EventName [, LuaArgs...])",
            "return": "Returns '''true''' on success or '''false''' on an error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Event"
        },
        "BroadcastRemoteEvent": {
            "params": [
                {
                    "name": "EventName",
                    "description": "The name of the remote event as a string which was explicit defined by [[AddRemoteEvent]]."
                }
            ],
            "description": "This function has the same functionality as [[CallRemoteEvent]]. The difference is that this function can call a remote event on all connected player",
            "syntax": "BroadcastRemoteEvent(EventName [, LuaArgs...])",
            "return": "Returns '''true''' on success or '''false''' on an error.",
            "info": {
                "context": "Server",
                "introduced": "1.4.0"
            },
            "category": "Event"
        },
        "SetPickupDimension": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this pickup. Players can only see pickups in the same dimension",
            "syntax": "SetPickupDimension(pickup, dimension)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "GetPickupDimension": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Gets the dimension of this pickup.",
            "syntax": "GetPickupDimension(pickup)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "SetPickupPropertyValue": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetPickupPropertyValue(pickup, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "GetPickupPropertyValue": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetPickupPropertyValue(pickup, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "SetPickupVisibleForPlayers": {
            "params": [
                {
                    "name": "Pickup",
                    "description": "ID of the pickup"
                },
                {
                    "name": "Players",
                    "description": "Player list in a form of an array"
                }
            ],
            "description": "Set pickup visible only for a certain array of players",
            "syntax": "SetPickupVisibleForPlayers(Pickup, Players)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "GetPickupCount": {
            "params": [],
            "description": "Gets the created pickup count.",
            "syntax": "GetPickupCount()",
            "return": "Returns number of created pickups.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "GetAllPickups": {
            "params": [],
            "description": "This function gets all the pickup IDs in a table.",
            "syntax": "GetAllPickups()",
            "return": "This function returns a table with pickup IDs.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "CreatePickup": {
            "params": [
                {
                    "name": "modelid",
                    "description": "See [[Objects]]."
                },
                {
                    "name": "x",
                    "description": "Coordinate X where to create this pickup."
                },
                {
                    "name": "y",
                    "description": "Coordinate Y where to create this pickup."
                },
                {
                    "name": "z",
                    "description": "Coordinate Z where to create this pickup."
                }
            ],
            "description": "Creates an object that spins around its axis. When a player ''picks'' it up an event [[OnPlayerPickupHit]] is called.",
            "syntax": "CreatePickup(modelid, x, y, z)",
            "return": "Returns the identifier to this newly created pickup.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "DestroyPickup": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Destroy a pickup created with [[CreatePickup]].",
            "syntax": "DestroyPickup(pickup)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "IsValidPickup": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Check if the specified pickup is valid or not.",
            "syntax": "IsValidPickup(pickup)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "SetPickupScale": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                },
                {
                    "name": "sx",
                    "description": "The scale X axis"
                },
                {
                    "name": "sy",
                    "description": "The scale Y axis"
                },
                {
                    "name": "sz",
                    "description": "The scale Z axis"
                }
            ],
            "description": "Set's the size scaling of the pickup.",
            "syntax": "SetPickupScale(pickup, sx, sy, sz)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "GetPickupScale": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Get the specified pickup scaling.",
            "syntax": "GetPickupScale(pickup)",
            "return": "Returns the x, y and z vectors.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "SetPickupVisibility": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                },
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "bVisible",
                    "description": "'''false''' to hide it for the player."
                }
            ],
            "description": "Set the pickup visibility for players.",
            "syntax": "SetPickupVisibility(pickup, player, bVisible)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Pickup"
        },
        "SetPickupLocation": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier."
                },
                {
                    "name": "x",
                    "description": "The X coordinate"
                },
                {
                    "name": "y",
                    "description": "The Y coordinate"
                },
                {
                    "name": "z",
                    "description": "The Z coordinate"
                }
            ],
            "description": "Set a new location for a pickup.",
            "syntax": "SetPickupLocation(pickup, x, y, z)",
            "return": "Returns '''true''' on success..",
            "info": {
                "context": "Server",
                "introduced": "1.1.0"
            },
            "category": "Pickup"
        },
        "GetPlayerBySteamId": {
            "params": [
                {
                    "name": "steamid",
                    "description": "The SteamId64 as an integer."
                }
            ],
            "description": "Gets a player by SteamID.",
            "syntax": "GetPlayerBySteamId(steamid)",
            "return": "Returns the player identifier. Returns '''false''' if no player has the specified steamid.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "Player"
        },
        "SetPlayerRagdoll": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player identifier."
                },
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable ragdoll."
                }
            ],
            "description": "Set the specified player's ragdoll.",
            "syntax": "SetPlayerRagdoll(playerid, bEnable)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerDimension": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension (Virtual World) of this player. Players can only see players and other entities in the same dimensio",
            "syntax": "SetPlayerDimension(player, dimension)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerDimension": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Gets the dimension of this player set with [[SetPlayerDimension]]",
            "syntax": "GetPlayerDimension(player)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerPropertyValue": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetPlayerPropertyValue(player, PropertyName, Value[, bSync])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerPropertyValue": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetPlayerPropertyValue(player, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsValidPlayer": {
            "params": [
                {
                    "name": "player",
                    "description": "The player id"
                }
            ],
            "description": "Checks whether the specified player is connected to the server or not.",
            "syntax": "IsValidPlayer(player)",
            "return": "Returns '''true''' if the player is connected, otherwise '''false'''.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerCount": {
            "params": [],
            "description": "Gets the count of the online players. On the client it only returns the number of streamed in players.",
            "syntax": "GetPlayerCount()",
            "return": "Count of players.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetAllPlayers": {
            "params": [],
            "description": "Get all players on the server. Useful for loops.",
            "syntax": "GetAllPlayers()",
            "return": "Returns a table of all players.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetNearestPlayer2D": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                }
            ],
            "description": "Gets the closest player in the specified range of XY. An important function which replaces the use of looping through all players and then checking if they are the closest.",
            "syntax": "GetNearestPlayer2D(x, y)",
            "return": "Returns the player identifier or '''false'''",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayersInRange2D": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "range",
                    "description": "The range in cm"
                }
            ],
            "description": "Gets the players in the specified range of XY in a table. An important function which replaces the use of looping through all players and then checking if they are in the specified range.",
            "syntax": "GetPlayersInRange2D(x, y, range)",
            "return": "Returns a table with the player identifiers in range.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayersInRange3D": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                },
                {
                    "name": "range",
                    "description": "The range"
                }
            ],
            "description": "Gets the players in the specified range of XYZ in a table.  An important function which replaces the use of looping through all players and then checking if they are in the specified range.",
            "syntax": "GetPlayersInRange3D(x, y, z, range)",
            "return": "Returns a table with the player identifiers in range.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetStreamedPlayersForPlayer": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the list of players streamed to the specified player.",
            "syntax": "GetStreamedPlayersForPlayer(player)",
            "return": "The array of players streamed to the client.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerName": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "name",
                    "description": "The new name to set for the player. Limited to 32 characters."
                }
            ],
            "description": "Sets a players name which will appear on the nametag. Overrides the Steam nickname.",
            "syntax": "SetPlayerName(player, name)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerName": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get a players Steam nickname/username.",
            "syntax": "GetPlayerName(player)",
            "return": "Returns the Steam username as shown on their profile. Max length: 32. If [[SetPlayerName]] was called then it will return the value passed there.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerSteamId": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the 64-bit Steam identifier of a player. Only works after [[OnPlayerSteamAuth]] was called.",
            "syntax": "GetPlayerSteamId(player)",
            "return": "Returns the 64-bit Steam identifier. Returns '''0''' if the player was not yet authenticated.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerNetworkStats": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                }
            ],
            "description": "Gets the clients' NetworkStats",
            "syntax": "GetPlayerNetworkStats(player)",
            "return": "packetlossTotal, packetlossLastSecond, messagesInResendBuffer, bytesInResendBuffer, bytesSend, bytesReceived, bytesResent, bytesSendTotal, bytesReceivedTotal, bytesResentTotal, isLimitedByCongestionControl, isLimitedByOutgoingBandwidthLimit",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerSpawnLocation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                },
                {
                    "name": "h",
                    "description": "The rotation."
                }
            ],
            "description": "Sets the spawn location for where the player will spawn after dying. Use [[SetPlayerLocation]] to instantly set a location.",
            "syntax": "SetPlayerSpawnLocation(player, x, y, z, h)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerStreamedIn": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier for which the other player should be streamed in."
                },
                {
                    "name": "otherid",
                    "description": "The player identifier for the player which will be streamed in."
                }
            ],
            "description": "Check if the player B (otherid) is streamed in for player A (player).",
            "syntax": "IsPlayerStreamedIn(player, otherid)",
            "return": "The function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerVoiceRange": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "range",
                    "description": "The desired voice range."
                }
            ],
            "description": "Sets the voice range of a playe",
            "syntax": "SetPlayerVoiceRange(player, range)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.4.1"
            },
            "category": "Player"
        },
        "SetPlayerVoiceChannel": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "channel",
                    "description": "The channel id as an integer. There is no limit on channels."
                },
                {
                    "name": "enable",
                    "description": "'''true''' to add a player to the voice channel. '''false''' to remove them."
                }
            ],
            "description": "Adds or removes a player from a voice channel. Players in the same channel will hear each other. Channel 0 is the default 3D world channel where players are added automatically on join. Other channels have their sound in 2D.",
            "syntax": "SetPlayerVoiceChannel(player, channel, enable)",
            "return": "This function returns '''true''' on success. If a player is already in a channel it will return '''false'''.",
            "info": {
                "context": "Server",
                "introduced": "1.1.0"
            },
            "category": "Player"
        },
        "IsPlayerVoiceChannel": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "channel",
                    "description": "The channel id as an integer."
                }
            ],
            "description": "Tests if a player is in a voice channel. Use [[SetPlayerVoiceChannel]] to set them.",
            "syntax": "IsPlayerVoiceChannel(player, channel)",
            "return": "This function returns '''true''' if a player is in the voice channel.",
            "info": {
                "context": "Server",
                "introduced": "1.1.0"
            },
            "category": "Player"
        },
        "SetPlayerVoiceEnabled": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player identifier."
                },
                {
                    "name": "bEnable",
                    "description": "The boolean enable status."
                }
            ],
            "description": "Enable a player's voice chat.",
            "syntax": "SetPlayerVoiceEnabled(playerid, bEnable)",
            "return": "Returns '''true''' if the change was succesfull, otherwise '''false'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerVoiceEnabled": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if the specified player has voice chat enabled or not.",
            "syntax": "IsPlayerVoiceEnabled(playerid)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerTalking": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is talking or not.",
            "syntax": "IsPlayerTalking(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "AddPlayerChat": {
            "params": [
                {
                    "name": "player",
                    "description": "The player indentifier."
                },
                {
                    "name": "message",
                    "description": "The chat message."
                }
            ],
            "description": "Adds (or sends) the specified player or client a messag",
            "syntax": "AddPlayerChat(player, message)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "AddPlayerChatRange": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "range",
                    "description": "The range in centimeters"
                },
                {
                    "name": "message",
                    "description": "The text message to send."
                }
            ],
            "description": "Add (or send) a chat message to everyone in the specified range.",
            "syntax": "AddPlayerChatRange(x, y, range, message)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "AddPlayerChatAll": {
            "params": [
                {
                    "name": "message",
                    "description": "The text message to send to everyone on the server."
                }
            ],
            "description": "Add (or send) a chat message to everyone on the server.",
            "syntax": "AddPlayerChatAll(message)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerState": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player ped state.",
            "syntax": "GetPlayerState(player)",
            "return": "Returns an integer. See [[PlayerState]].",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerMovementMode": {
            "params": [
                {
                    "name": "player",
                    "description": "The player"
                }
            ],
            "description": "Returns the players movement mode",
            "syntax": "GetPlayerMovementMode(player)",
            "return": "Returns the [[MovementModes]]",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerMovementSpeed": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player's movement speed.",
            "syntax": "GetPlayerMovementSpeed(player)",
            "return": "Returns the movement speed as a float.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerAiming": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is aiming or not.",
            "syntax": "IsPlayerAiming(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerReloading": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is reloading a gun or not.",
            "syntax": "IsPlayerReloading(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the vehicle identifier the player is in.",
            "syntax": "GetPlayerVehicle(player)",
            "return": "Returns the vehicle identifier the player is in. Returns '''0''' if not in any vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerVehicleSeat": {
            "params": [
                {
                    "name": "player",
                    "description": "Player whos seat you want to get"
                }
            ],
            "description": "Gets the vehicle seat a player is.",
            "syntax": "GetPlayerVehicleSeat(player)",
            "return": "ID of the vehicle seat player is in",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerInVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "Player you want to set in a vehicle"
                },
                {
                    "name": "vehicle ",
                    "description": "Vehicle you want to set player into"
                }
            ],
            "description": "With this function you can put players inside vehicles or use it to change their seats",
            "syntax": "SetPlayerInVehicle(player, vehicle [, seat])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "RemovePlayerFromVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "Player you want to kick out of a vehicle"
                }
            ],
            "description": "Used to kick players from vehicles/force exit",
            "syntax": "RemovePlayerFromVehicle(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerLocation": {
            "params": [
                {
                    "name": "player",
                    "description": "The client identifier"
                },
                {
                    "name": "x",
                    "description": "The X coordinate of position to put the player at."
                },
                {
                    "name": "y",
                    "description": "The Y coordinate of position to put the player at."
                },
                {
                    "name": "z",
                    "description": "The Z coordinate of position to put the player at."
                }
            ],
            "description": "Set the specified client's location.",
            "syntax": "SetPlayerLocation(player, x, y, z)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerLocation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier. On the client this parameter is optional and will return the local player location if not set."
                }
            ],
            "description": "Get the specified client's location.",
            "syntax": "GetPlayerLocation(player)",
            "return": "Returns three float value X, Y, Z representing the players location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerWeaponStat": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "weaponid",
                    "description": "The weapon model identifier."
                },
                {
                    "name": "stat",
                    "description": "The stat name."
                },
                {
                    "name": "value",
                    "description": "New stat value"
                }
            ],
            "description": "Modifies a weapon stat per player.",
            "syntax": "SetPlayerWeaponStat(player, weaponid, stat, value)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerWeapon": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "weapon_model",
                    "description": "The weapon model [[Weapons]]."
                },
                {
                    "name": "ammo",
                    "description": "How many bullets the player gets."
                },
                {
                    "name": "equip",
                    "description": "''true'' for the player to equip the weapon. ''false'' to just assign this new weapon to a weapon slot."
                },
                {
                    "name": "weapon_slot",
                    "description": "The slot to assign 1-3."
                },
                {
                    "name": "bLoaded",
                    "description": "To have the magazine loaded already or not."
                }
            ],
            "description": "Gives the player a weapon.",
            "syntax": "SetPlayerWeapon(player, weapon_model, ammo, equip, weapon_slot [, bLoaded])",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerWeapon": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the specified player's weapon id, ammo, ammo in magazine in the specified weapon slot.",
            "syntax": "GetPlayerWeapon(player [, weaponslot])",
            "return": "Returns weapon id, ammo.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerEquippedWeaponSlot": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                }
            ],
            "description": "Returns the slot the player currently has equiped",
            "syntax": "GetPlayerEquippedWeaponSlot(player)",
            "return": "The weapon slot the player currently has equipped",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "EquipPlayerWeaponSlot": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "weaponslot",
                    "description": "The weapon slot (range 1 - 3)"
                }
            ],
            "description": "Equip the specified weapon slot for the specified player.",
            "syntax": "EquipPlayerWeaponSlot(player, weaponslot)",
            "return": "This function returns ''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerEquippedWeapon": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the specified player's equiped weapon Id.",
            "syntax": "GetPlayerEquippedWeapon(player)",
            "return": "This function returns the weapon ID.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerHeading": {
            "params": [
                {
                    "name": "player",
                    "description": "Player you want to set heading of"
                },
                {
                    "name": "heading",
                    "description": "Angle (0-360) you want to set players heading to"
                }
            ],
            "description": "Sets players heading (yaw rotation)",
            "syntax": "SetPlayerHeading(player, heading)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerHeading": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the specified player's heading (rotation).",
            "syntax": "GetPlayerHeading(player)",
            "return": "This function returns heading in float.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerSpectate": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "bSpectate",
                    "description": "The boolean status."
                }
            ],
            "description": "Toggle the player spectate mode.",
            "syntax": "SetPlayerSpectate(player, bSpectate)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "IsPlayerDead": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is dead.",
            "syntax": "IsPlayerDead(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerHealth": {
            "params": [
                {
                    "name": "player",
                    "description": "Player you want to set health of"
                },
                {
                    "name": "health",
                    "description": "New health value you want to set player to"
                }
            ],
            "description": "You can set the player's health in a range of 0 to 100 units.",
            "syntax": "SetPlayerHealth(player, health)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerHealth": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the specified player's health.",
            "syntax": "GetPlayerHealth(player)",
            "return": "Returns the player's health in floating point number.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerArmor": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "armor",
                    "description": "The armor value."
                }
            ],
            "description": "Set the armor of the player.",
            "syntax": "SetPlayerArmor(player, armor)",
            "return": "This function doesn't have a return value.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerArmor": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the armor health of the specified player.",
            "syntax": "GetPlayerArmor(player)",
            "return": "The armor value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerRespawnTime": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "mstime",
                    "description": "Time in milliseconds. Clamped from 1-36000000."
                }
            ],
            "description": "Sets the time it takes for player to respawn after their death",
            "syntax": "SetPlayerRespawnTime(player, mstime)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerRespawnTime": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player's respawn time set with [[SetPlayerRespawnTime]].",
            "syntax": "GetPlayerRespawnTime(player)",
            "return": "Returns the respawn time in milliseconds.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerIP": {
            "params": [
                {
                    "name": "player",
                    "description": "Player whos IP address you want to get"
                }
            ],
            "description": "Returns players IP address",
            "syntax": "GetPlayerIP(player)",
            "return": "Players IP Address",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerPing": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the ping of the specified player.",
            "syntax": "GetPlayerPing(playerid)",
            "return": "Returns the player ping in integer.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "KickPlayer": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "reason",
                    "description": "The reason"
                }
            ],
            "description": "Kicks (disconnect) a player with a reason, colors are '''not''' supported.",
            "syntax": "KickPlayer(player, reason)",
            "return": "This function doesn't have a return value.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerLocale": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the computers localization of a player. For example en_US, de_DE, etc.",
            "syntax": "GetPlayerLocale(player)",
            "return": "Returns a string with the player's localization.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerGUID": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "The player's unique identifier based on their computer.",
            "syntax": "GetPlayerGUID(player)",
            "return": "Returns the GUID unique to the player's computer.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerGameVersion": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player's game version.",
            "syntax": "GetPlayerGameVersion(player)",
            "return": "Gets the version as an integer.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerAnimation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "animation",
                    "description": "Animation name, see [[AnimationList]]. Since v1.2.2 this can also be any integer that you used in [[ReplaceAnimationLibrarySequence]]."
                }
            ],
            "description": "Set the player's animation.",
            "syntax": "SetPlayerAnimation(player, animation)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "AttachPlayerParachute": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "bAttach",
                    "description": "The boolean status."
                }
            ],
            "description": "Attach the specified player a parachute.",
            "syntax": "AttachPlayerParachute(player, bAttach)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetPlayerHeadSize": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "size",
                    "description": "The size in floating point value (range 0.0 - 3.0)"
                }
            ],
            "description": "Sets the player's head size.",
            "syntax": "SetPlayerHeadSize(player, size)",
            "return": "This function returs nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "GetPlayerHeadSize": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player's head size set with [[SetPlayerHeadSize]].",
            "syntax": "GetPlayerHeadSize(player)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Player"
        },
        "SetText3DDimension": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this text3d. Players can only see 3D texts in the same dimension",
            "syntax": "SetText3DDimension(text3d, dimension)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetText3DDimension": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier."
                }
            ],
            "description": "Gets the dimension of this text3d.",
            "syntax": "GetText3DDimension(text3d)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "SetText3DPropertyValue": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetText3DPropertyValue(text3d, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetText3DPropertyValue": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetText3DPropertyValue(text3d, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetText3DCount": {
            "params": [],
            "description": "Returns the number of text 3D created.",
            "syntax": "GetText3DCount()",
            "return": "The number of text 3D created.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetAllText3D": {
            "params": [],
            "description": "Get all text 3D on the server. Useful for loops.",
            "syntax": "GetAllText3D()",
            "return": "Returns a table of all text 3D.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "CreateText3D": {
            "params": [
                {
                    "name": "text",
                    "description": "Text you want to show"
                },
                {
                    "name": "size",
                    "description": "Size of the text"
                },
                {
                    "name": "x",
                    "description": "X position"
                },
                {
                    "name": "y",
                    "description": "Y position"
                },
                {
                    "name": "z",
                    "description": "Z position"
                }
            ],
            "description": "Creates a 3d text (hologram) which always faces the player camera, only visible from certain range",
            "syntax": "CreateText3D(text, size, x, y, z [, rx, ry, rz])",
            "return": "Returns the text 3D identifier.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "DestroyText3D": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The 3D text label identifier"
                }
            ],
            "description": "Destroys the specified 3D text label.",
            "syntax": "DestroyText3D(text3d)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "IsValidText3D": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3d identifier."
                }
            ],
            "description": "Check if the text 3d is valid or not.",
            "syntax": "IsValidText3D(text3d)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "SetText3DAttached": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3D indentifier."
                },
                {
                    "name": "attachtype",
                    "description": "[[AttachType]]"
                },
                {
                    "name": "attachid",
                    "description": "The identifier of the attach type (entity)"
                },
                {
                    "name": "x",
                    "description": "Relative X location."
                },
                {
                    "name": "y",
                    "description": "Relative Y location."
                },
                {
                    "name": "z",
                    "description": "Relative Z location."
                }
            ],
            "description": "Attaches a 3D Text to another entity.",
            "syntax": "SetText3DAttached(text3d, attachtype, attachid, x, y, z [, rx, ry, rz, SocketName])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "SetText3DVisibility": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier."
                },
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "bVisible",
                    "description": "'''false''' to hide it for the player."
                }
            ],
            "description": "Set the text3d visibility for players.",
            "syntax": "SetText3DVisibility(pickup, text3d, bVisible)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "SetText3DText": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3D identifier"
                },
                {
                    "name": "text",
                    "description": "Text you want to show"
                }
            ],
            "description": "Updates a 3D Text label created earlier with [[CreateText3D]].",
            "syntax": "SetText3DText(text3d, text)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetText3DText": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3D identifier"
                }
            ],
            "description": "Gets a text3d text string.",
            "syntax": "GetText3DText(text3d)",
            "return": "Returns the text as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.5.2"
            },
            "category": "Text3D"
        },
        "Delay": {
            "params": [
                {
                    "name": "Milliseconds",
                    "description": "The interval in milliseconds."
                },
                {
                    "name": "LuaFunction",
                    "description": "The Lua function to delay."
                }
            ],
            "description": "Create a delayed function just like a timer but only once. ([[DelayFor]])",
            "syntax": "Delay(Milliseconds, LuaFunction [, UserArgs])",
            "return": "Returns the id of this delay, same as for timers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "GetTimerCount": {
            "params": [],
            "description": "Gets the created timers count.",
            "syntax": "GetTimerCount()",
            "return": "Returns number of created timers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "GetAllTimers": {
            "params": [],
            "description": "Get all timers on the server/ client.",
            "syntax": "GetAllTimers()",
            "return": "Returns a table of all timer identifiers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "IsValidTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier."
                }
            ],
            "description": "Check if the timer identifier specified is valid or not.",
            "syntax": "IsValidTimer(timer)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "CreateTimer": {
            "params": [
                {
                    "name": "LuaFunction",
                    "description": "The function to execute."
                },
                {
                    "name": "Interval ",
                    "description": "Interval to execute the function."
                }
            ],
            "description": "Creates a timer to call a latent functio",
            "syntax": "CreateTimer(LuaFunction, Interval [, UserArgs])",
            "return": "Returns the identifier to this timer. Use [[DestroyTimer]] to stop it.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "CreateCountTimer": {
            "params": [
                {
                    "name": "LuaFunction",
                    "description": "The function to execute."
                },
                {
                    "name": "Interval",
                    "description": "Interval to execute the function."
                },
                {
                    "name": "Count",
                    "description": "How often to execute this timer. Use [[CreateTimer]] for a non-stop version."
                }
            ],
            "description": "Creates a countdown timer.",
            "syntax": "CreateCountTimer(LuaFunction, Interval, Count [, UserArgs])",
            "return": "Returns the identifier to this timer. Use [[DestroyTimer]] to stop it.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "DestroyTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier."
                }
            ],
            "description": "Destroys a timer created with [[CreateTimer]] or [[CreateCountTimer]].",
            "syntax": "DestroyTimer(timer)",
            "return": "Returns '''true''' if success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "PauseTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Pauses the specified timer.",
            "syntax": "PauseTimer(timer)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "UnpauseTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Unpause an already paused timer with this function.",
            "syntax": "UnpauseTimer(timer)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "GetTimerRemainingTime": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Gets the specified timer's remaining time.",
            "syntax": "GetTimerRemainingTime(timer)",
            "return": "The '''float''' value of timer interval left.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Timer"
        },
        "GetVehicleLicensePlate": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the vehicle license plate text.",
            "syntax": "GetVehicleLicensePlate(vehicle)",
            "return": "Returns the license plate text as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleDimension": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "dimension",
                    "description": "The new dimension to set."
                }
            ],
            "description": "Sets the dimension of this vehicle. Players can only see vehicles in the same dimension",
            "syntax": "SetVehicleDimension(vehicle, dimension)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleDimension": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the dimension of this vehicle.",
            "syntax": "GetVehicleDimension(vehicle)",
            "return": "Returns the dimension.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehiclePropertyValue": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetVehiclePropertyValue(vehicle, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehiclePropertyValue": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetVehiclePropertyValue(vehicle, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleCount": {
            "params": [],
            "description": "Returns the number of vehicles.",
            "syntax": "GetVehicleCount()",
            "return": "Returns the number of vehicles.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetAllVehicles": {
            "params": [],
            "description": "Get all the vehicle identifiers in a table.",
            "syntax": "GetAllVehicles()",
            "return": "This function returns a table with valid vehicle identifiers.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleModel": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Get the vehicle model id.",
            "syntax": "GetVehicleModel(vehicle)",
            "return": "Returns the vehicle model.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleModelName": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle identifier you want to get the model name of"
                }
            ],
            "description": "Returns the name of the vehicle model by its ID",
            "syntax": "GetVehicleModelName(vehicle)",
            "return": "The name of the vehicle model. '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleRespawnParams": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "EnableRespawn ",
                    "description": "The respawn toggle boolean."
                },
                {
                    "name": "RespawnTime",
                    "description": "The respawn time in milliseconds."
                }
            ],
            "description": "Set the per-vehicle respawn parameters.",
            "syntax": "SetVehicleRespawnParams(vehicle, EnableRespawn [, RespawnTime, RepairOnRespawn])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "IsVehicleStreamedIn": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Check if the player has the specified vehicle streamed in.",
            "syntax": "IsVehicleStreamedIn(player, vehicle)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetStreamedVehiclesForPlayer": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                }
            ],
            "description": "Returns the array with vehicles streamed for the player.",
            "syntax": "GetStreamedVehiclesForPlayer(player)",
            "return": "Table of vehicle Ids streamed for the player.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleLocation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "x",
                    "description": "World X location."
                },
                {
                    "name": "y",
                    "description": "World Y location."
                },
                {
                    "name": "z",
                    "description": "World Z location."
                }
            ],
            "description": "Teleports a vehicle to a specified location.",
            "syntax": "SetVehicleLocation(vehicle, x, y, z)",
            "return": "Returns '''true''' on success. '''false''' if the vehicle does not exist.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleLocation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's location.",
            "syntax": "GetVehicleLocation(vehicle)",
            "return": "Returns the XYZ vectors of the vehicle location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleRotation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "x",
                    "description": "The pitch rotation"
                },
                {
                    "name": "y",
                    "description": "The yaw rotation"
                },
                {
                    "name": "z",
                    "description": "The roll rotation"
                }
            ],
            "description": "Sets the vehicle rotation.",
            "syntax": "SetVehicleRotation(vehicle, x, y, z)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleRotation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the vehicle rotation (pitch, yaw and roll) of the specified vehicle.",
            "syntax": "GetVehicleRotation(vehicle)",
            "return": "The rotation pitch, yaw and roll of the vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleHeading": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "h",
                    "description": "The heading in float"
                }
            ],
            "description": "Set's the vehicle heading (rotation).",
            "syntax": "SetVehicleHeading(vehicle, h)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleHeading": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's heading (rotation).",
            "syntax": "GetVehicleHeading(vehicle)",
            "return": "This function returns the vehicle heading in float.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleHealth": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "health",
                    "description": "The vehicle health in float value between 0 to 10000."
                }
            ],
            "description": "Set the specified health for the specified vehicle. The default health is '''5000'''",
            "syntax": "SetVehicleHealth(vehicle, health)",
            "return": "This function '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleHealth": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the specified vehicle health in float.",
            "syntax": "GetVehicleHealth(vehicle)",
            "return": "Vehicle health in float value between 0 to 10000",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleLicensePlate": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle identifier of vehicle which you wish to change license plate text"
                },
                {
                    "name": "text",
                    "description": "New license plate text (up to 13 characters)"
                }
            ],
            "description": "Sets the vehicle license plate text",
            "syntax": "SetVehicleLicensePlate(vehicle, text)",
            "return": "This function has no return value",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleVelocity": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the vehicle's velocity vectors.",
            "syntax": "GetVehicleVelocity(vehicle)",
            "return": "This function returns the velocity of your vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "CreateVehicle": {
            "params": [
                {
                    "name": "modelid",
                    "description": "The [[Vehicl"
                },
                {
                    "name": "x, y, z",
                    "description": "The location/coordinates of where this vehicle is going to spawn."
                }
            ],
            "description": "This function creates a vehicle at a desired locatio",
            "syntax": "CreateVehicle(modelid, x, y, z [, heading])",
            "return": "Returns an identifier to the new vehicle. '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "DestroyVehicle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle to destroy."
                }
            ],
            "description": "Destroys a vehicle that was previously spawned by [[CreateVehicle]].",
            "syntax": "DestroyVehicle(vehicle)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "IsValidVehicle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier to check."
                }
            ],
            "description": "Checks whether a given vehicle identifier is a valid vehicle.",
            "syntax": "IsValidVehicle(vehicle)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleDriver": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the driver (player identifier) of a given vehicle. Use [[GetVehiclePassenger]] to get any vehicle occupant.",
            "syntax": "GetVehicleDriver(vehicle)",
            "return": "The player identifier. Returns '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehiclePassenger": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle to get a passenger from."
                },
                {
                    "name": "seat",
                    "description": "The seat to the passenger."
                }
            ],
            "description": "Get any occupant of a vehicle at a given seat.",
            "syntax": "GetVehiclePassenger(vehicle, seat)",
            "return": "Returns the player identifier. If there is no passenger in that seat '''0''' is returned.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleNumberOfSeats": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Returns the amount of seats a given vehicle has.",
            "syntax": "GetVehicleNumberOfSeats(vehicle)",
            "return": "Number of valid seats the given vehicle has. Returns '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleColor": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle to change the color of."
                },
                {
                    "name": "IntColor",
                    "description": "The color as an integer. Use [[RGB]] to convert RGB codes to int."
                }
            ],
            "description": "Sets the color of a given vehicle.",
            "syntax": "SetVehicleColor(vehicle, IntColor)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleColor": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the specified vehicle's color.",
            "syntax": "GetVehicleColor(vehicle)",
            "return": "Returns the spcecified vehicle's color in hex.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleLinearVelocity": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis velocity"
                },
                {
                    "name": "y",
                    "description": "The Y axis velocity"
                },
                {
                    "name": "z",
                    "description": "The Z axis velocity"
                }
            ],
            "description": "Set the vehicle's linear velocity.",
            "syntax": "SetVehicleLinearVelocity(vehicle, x, y, z [, reset])",
            "return": "This function returns '''true'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleAngularVelocity": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis velocity"
                },
                {
                    "name": "y",
                    "description": "The Y axis velocity"
                },
                {
                    "name": "z",
                    "description": "The Z axis velocity"
                }
            ],
            "description": "Set the vehicle's angular (rotational) velocity.",
            "syntax": "SetVehicleAngularVelocity(vehicle, x, y, z [, reset])",
            "return": "This function returns '''true'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleGear": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's gear.",
            "syntax": "GetVehicleGear(vehicle)",
            "return": "Vehicle gear as integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleHoodRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The identifier of the vehicle."
                },
                {
                    "name": "openRatio",
                    "description": "The ratio to open the hood in degrees. 0 closes the hood."
                }
            ],
            "description": "Sets a vehicles hood to a specific open ratio.",
            "syntax": "SetVehicleHoodRatio(vehicle, openRatio)",
            "return": "This function returns ''true'' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleHoodRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's hood ratio.",
            "syntax": "GetVehicleHoodRatio(vehicle)",
            "return": "Returns the ratio of the vehicle hood.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleTrunkRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "openRatio",
                    "description": "The open ratio in floating point."
                }
            ],
            "description": "Set the vehicle's trunk ratio.",
            "syntax": "SetVehicleTrunkRatio(vehicle, openRatio)",
            "return": "This function does not return anything.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleTrunkRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's trunk ratio.",
            "syntax": "GetVehicleTrunkRatio(vehicle)",
            "return": "The floating point value of the trunk ratio.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "StartVehicleEngine": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle which engine you want to start"
                }
            ],
            "description": "Used to start vehicle engine",
            "syntax": "StartVehicleEngine(vehicle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "StopVehicleEngine": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle which engine you want to stop"
                }
            ],
            "description": "Used to stop vehicle engine",
            "syntax": "StopVehicleEngine(vehicle)",
            "return": "Returns '''true''' on success, even if the engine is off already.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleEngineState": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's engine state.",
            "syntax": "GetVehicleEngineState(vehicle)",
            "return": "Returns '''true''' if on.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleLightEnabled": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "enabled",
                    "description": "The boolean status"
                }
            ],
            "description": "This function toggles the vehicle's lights.",
            "syntax": "SetVehicleLightEnabled(vehicle, enabled)",
            "return": "This function returns '''?'''.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleLightState": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's light state.",
            "syntax": "GetVehicleLightState(vehicle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "SetVehicleDamage": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle identifier."
                },
                {
                    "name": "damageIndex",
                    "description": "Damage part of the vehicle between 1-8, depending on the vehicle."
                },
                {
                    "name": "damage",
                    "description": "Value between 0.0 (no damage) and 1.0 (full damage)."
                }
            ],
            "description": "Sets the vehicle damage for a specific part/region of the vehicle. ",
            "syntax": "SetVehicleDamage(vehicle, damageIndex, damage)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "GetVehicleDamage": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "damageIndex",
                    "description": "Damage part of the vehicle between 1-8, depending on the vehicle."
                }
            ],
            "description": "Returns the vehicle damage for a specific part/region of the vehicle.",
            "syntax": "GetVehicleDamage(vehicle, damageIndex)",
            "return": "Returns a value between 0.0 (no damage) and 1.0 (full damage).",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "AttachVehicleNitro": {
            "params": [
                {
                    "name": "vehicle ",
                    "description": "Vehicle identifier which you want to attach nitro to."
                }
            ],
            "description": "Enables/Disables vehicle nitro function.",
            "syntax": "AttachVehicleNitro(vehicle [, attach])",
            "return": "This function does not return any value.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Vehicles"
        },
        "EnableVehicleBackfire": {
            "params": [
                {
                    "name": "vehicle ",
                    "description": "Vehicle identifier."
                }
            ],
            "description": "Enables/Disables vehicle backfire effects.",
            "syntax": "EnableVehicleBackfire(vehicle [, enable])",
            "return": "This function does not return any value.",
            "info": {
                "context": "Server",
                "introduced": "1.2"
            },
            "category": "Vehicles"
        },
        "url_encode": {
            "params": [
                {
                    "name": "str",
                    "description": "The string to encode."
                }
            ],
            "description": "Encodes your string so it is safe to send with an URL.",
            "syntax": "url_encode(str)",
            "return": "Returns the encoded string.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_count": {
            "params": [],
            "description": "Gets amount currently existing http requests.",
            "syntax": "http_count()",
            "return": "Returns number of http requests.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_get_all": {
            "params": [],
            "description": "Gets all http identifer in a table.",
            "syntax": "http_get_all()",
            "return": "Returns all http identifers in a table.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_is_valid": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Checks if this http identifier is valid.",
            "syntax": "http_is_valid(http)",
            "return": "Returns '''true''' if its valid.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_create": {
            "params": [],
            "description": "Creates a new http identifier that you can use to send requests. Call [[http_destroy]] if you no longer need an identifier.",
            "syntax": "http_create()",
            "return": "Returns an new http identifier.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_destroy": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Destroys an identifier. You must always call this if you no longer need the http request.",
            "syntax": "http_destroy(http)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_is_error": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "After request was made, this function returns if an error occured. The error can be retrieved by [[http_result_error]",
            "syntax": "http_is_error(http)",
            "return": "Returns '''true''' if an error occurred.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_result_error": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Returns any error after a request was made.",
            "syntax": "http_result_error(http)",
            "return": "Returns the error as an string. (If any)",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_result_body": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Returns the result body after a request was made.",
            "syntax": "http_result_body(http)",
            "return": "Returns the result body as a string",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_result_header": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Returns the result header after a request was made.",
            "syntax": "http_result_header(http)",
            "return": "Returns the result header as a string",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_result_status": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Returns the http status code after a request was made.",
            "syntax": "http_result_status(http)",
            "return": "Returns the http status code.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_protocol": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "protocol",
                    "description": "\"http\", \"https\" (default)"
                }
            ],
            "description": "Sets the http protocol.",
            "syntax": "http_set_protocol(http, protocol)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_resolver_protocol": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "protocol",
                    "description": "\"ipv4\", \"ipv6\", \"any\" (default)"
                }
            ],
            "description": "Sets if the host should be resolved over IPv4 or IPv6. By default \"any\" will take whatever address is available",
            "syntax": "http_set_resolver_protocol(http, protocol)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_host": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "host",
                    "description": "The remote host."
                }
            ],
            "description": "Sets the host of this request which is basically the domain or IP of the remote end.",
            "syntax": "http_set_host(http, host)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_port": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "port",
                    "description": "The port of the remote server."
                }
            ],
            "description": "Sets the port of this request. For HTTP this should be 80, for HTTPS 443.",
            "syntax": "http_set_port(http, port)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_target": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "target",
                    "description": "The target path as a string."
                }
            ],
            "description": "Sets the request target which is basically the path that you want to access.",
            "syntax": "http_set_target(http, target)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_verb": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "verb",
                    "description": "Valid methods are: \"get\" (default), \"head\", \"post\", \"put\", \"delete\""
                }
            ],
            "description": "Sets the request method for this http request.",
            "syntax": "http_set_verb(http, verb)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_timeout": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "timeout",
                    "description": "Timeout in milliseconds. Default: 30000 "
                }
            ],
            "description": "Sets the timeout in milliseconds for this request.",
            "syntax": "http_set_timeout(http, timeout)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_verifymode": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "body",
                    "description": "Modes: \"verify_none\", \"verify_peer\" (Default) "
                }
            ],
            "description": "If this is an https request this setting controls of the peer certificate is verified.)",
            "syntax": "http_set_verifymode(http, verifymode)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_version": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "version",
                    "description": "Version as an int: 10 (1.0), 11 (1.1), 20 (2.0)"
                }
            ],
            "description": "Sets the http version used for this request. (Default: 11 (http 1.1))",
            "syntax": "http_set_version(http, version)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_keepalive": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "keepalive",
                    "description": "'''true''' to enable keep alive."
                }
            ],
            "description": "Sets if this request should have the keep alive flag. (Default: false)",
            "syntax": "http_set_keepalive(http, keepalive)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_field": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "field",
                    "description": "Name of the field."
                },
                {
                    "name": "value",
                    "description": "New field value."
                }
            ],
            "description": "Sets a field with a value in this request.",
            "syntax": "http_set_field(http, field, value)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_set_body": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                },
                {
                    "name": "body",
                    "description": "The new body as a string."
                }
            ],
            "description": "Sets the request body.",
            "syntax": "http_set_body(http, body)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        },
        "http_send": {
            "params": [
                {
                    "name": "http",
                    "description": "The http identifier."
                }
            ],
            "description": "Sends an http request.",
            "syntax": "http_send(http [, LuaFunction, UserArgs...])",
            "return": "Returns '''true''' if the request was successfully sent. '''false''' otherwise.",
            "info": {
                "context": "Server",
                "introduced": "1.0.3"
            },
            "category": "HTTP"
        }
    },
    "client": {
        "DoesPakExist": {
            "params": [
                {
                    "name": "PakName",
                    "description": "The name of the Pak file without extension."
                }
            ],
            "description": "Checks if a pak with the specified name exists.",
            "syntax": "DoesPakExist(PakName)",
            "return": "Returns '''true''' when the Pak exsits.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pak "
        },
        "LoadPak": {
            "params": [
                {
                    "name": "PakName",
                    "description": "The name of the Pak file without extension."
                }
            ],
            "description": "Loads a .pak file.",
            "syntax": "LoadPak(PakName [, RootPath, ContentPath])",
            "return": "Returns '''true''' on success. Start the client with the \"-dev\" parameter switch to enable logging. Useful for errors.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pak "
        },
        "ReplaceObjectModelMesh": {
            "params": [
                {
                    "name": "ModelId",
                    "description": "The object model identifier to replace the mesh for, see [[Objects]]."
                },
                {
                    "name": "PathToMesh",
                    "description": "Path to your mesh asset."
                }
            ],
            "description": "Replaces a model on the known object model list. Will not replace already spawned objects. So call this before any object spawn",
            "syntax": "ReplaceObjectModelMesh(ModelId, PathToMesh)",
            "return": "Returns '''true''' on success. Start the client with the \"-dev\" parameter switch to enable logging. Useful for errors.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pak "
        },
        "ReplaceAnimationLibrarySequence": {
            "params": [
                {
                    "name": "AnimationId",
                    "description": "The animation id as an integer, see [[AnimationList]]. To add a new animation use an id lower than 1000."
                },
                {
                    "name": "PathToNewAnimiation",
                    "description": "Path to your animation sequence asset."
                }
            ],
            "description": "Replaces or adds a new animation sequence in the animation library. These affect the animations that can be set with [[SetPlayerAnimation]]",
            "syntax": "ReplaceAnimationLibrarySequence(AnimationId, PathToNewAnimiation [, LoopCount, bLayeredBlendSpine] )",
            "return": "Returns '''true''' if it was successfully added.",
            "info": {
                "context": "Client",
                "introduced": "1.2.2"
            },
            "category": " Pak "
        },
        "GetAllFilesInPak": {
            "params": [
                {
                    "name": "PakName",
                    "description": "The name of the Pak file without extension."
                }
            ],
            "description": "Returns all files that are found inside a pak file.",
            "syntax": "GetAllFilesInPak(PakName)",
            "return": "Returns a table containing all file names.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pak "
        },
        "FlashInTaskbar": {
            "params": [
                {
                    "name": "bFlash",
                    "description": "'''true''' to make it flash, '''false''' to stop flashing."
                }
            ],
            "description": "Flashes the icon in the taskbar of the game.",
            "syntax": "FlashInTaskbar(bFlash)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.5.0"
            },
            "category": " Game "
        },
        "IsGameWindowFocused": {
            "params": [],
            "description": "Checks whether the current game window is focused.",
            "syntax": "IsGameWindowFocused()",
            "return": "Returns '''true''' if the game window is focused. '''false''' otherwise",
            "info": {
                "context": "Client",
                "introduced": "1.5.0"
            },
            "category": " Game "
        },
        "SetStorageValue": {
            "params": [
                {
                    "name": "key",
                    "description": "The name of this value."
                },
                {
                    "name": "value",
                    "description": "The value to save, can be int, float, string and bool"
                }
            ],
            "description": "Can be used to save/read a variable/value on the client. Useful for some setting",
            "syntax": "SetStorageValue(key, value)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.4.2"
            },
            "category": " Game "
        },
        "GetStorageValue": {
            "params": [
                {
                    "name": "key",
                    "description": "The name of this value."
                }
            ],
            "description": "Can be used to save/read a variable/value on the client. Useful for some setting",
            "syntax": "GetStorageValue(key)",
            "return": "Returns the value that has bee set for this key. If it does not exist \"nil\" (nothing) will be returned.",
            "info": {
                "context": "Client",
                "introduced": "1.4.2"
            },
            "category": " Game "
        },
        "GetGameLanguage": {
            "params": [],
            "description": "Gets the language that the player has set in their game settings.",
            "syntax": "GetPlayerLanguage()",
            "return": "Language as string in 2 letter code.",
            "info": {
                "context": "Client",
                "introduced": "1.5.0"
            },
            "category": " Game "
        },
        "GetGameVersion": {
            "params": [],
            "description": "Returns the server/ client's game version",
            "syntax": "GetGameVersion()",
            "return": "Returns the server/ client's game version as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "GetGameVersionString": {
            "params": [],
            "description": "Returns the server/ client's game version as a string.",
            "syntax": "GetGameVersionString()",
            "return": "Returns the game version as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "IsGameDevMode": {
            "params": [],
            "description": "Checks whether the game is in development mode. The development mode can be enabled by passing the -dev argument to the game executable.",
            "syntax": "IsGameDevMode()",
            "return": "Returns '''true''' if the game was started with the -dev switch.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "IsPlayerInMainMenu": {
            "params": [],
            "description": "Check if the client is in main menu. Can be used to make a pause system.",
            "syntax": "IsPlayerInMainMenu()",
            "return": "Returns '''true''' if success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "InvokeDamageFX": {
            "params": [
                {
                    "name": "value",
                    "description": "The intensity value in integer (range 0 - 1000)."
                }
            ],
            "description": "Invokes the visual damage effect for the client screen.",
            "syntax": "InvokeDamageFX(value)",
            "return": "This function returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "UpdateDiscordActivity": {
            "params": [
                {
                    "name": "activity",
                    "description": "Activity settings as a table."
                }
            ],
            "description": "Sets the discord activity. Requires \"discord_client_id\" to be set in the [[server_conf",
            "syntax": "UpdateDiscordActivity(activity)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.2.2"
            },
            "category": " Game "
        },
        "ConnectToServer": {
            "params": [
                {
                    "name": "Address",
                    "description": "Server IP or hostname."
                },
                {
                    "name": "Port",
                    "description": "Server port."
                }
            ],
            "description": "Connects the game to another server. The connection will happen on the next game tick.",
            "syntax": "ConnectToServer(Address, Port [, Password, LevelMap])",
            "return": "Returns '''false''' if this function was already called. If LevelMap was set but is an invalid (non existent) map this function will return '''false''' and no connection will happen. Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "SetNearClipPlane": {
            "params": [
                {
                    "name": "distance",
                    "description": "The distance in which you have to cull the objects. Set to zero (0) to reset back to defaults."
                }
            ],
            "description": "This function culls triangles in a certain distance. Useful for the first person mode to hide head attachments.",
            "syntax": "SetNearClipPlane(distance)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "CreateSky": {
            "params": [],
            "description": "Creates the default Onset sky system on a custom map. This only works on custom map",
            "syntax": "CreateSky()",
            "return": "Returns an AActor reference to the sky actor. '''false''' on error.",
            "info": {
                "context": "Client",
                "introduced": "1.3.0"
            },
            "category": " Game "
        },
        "GetAllPackages": {
            "params": [],
            "description": "Returns the name of packages in a table.",
            "syntax": "GetAllPackages()",
            "return": "This function returns a table with package names.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "GetPackageFiles": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "The package name."
                }
            ],
            "description": "Returns all files that are registered with a specific package. See [[packages]].",
            "syntax": "GetPackageFiles(PackageName)",
            "return": "This function returns a table with the package files.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.4.0"
            },
            "category": " Game "
        },
        "IsServer": {
            "params": [],
            "description": "Used to check if a script currently runs on the server.",
            "syntax": "IsServer()",
            "return": "Returns '''true''' on the server and '''false''' on the client.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.4.0"
            },
            "category": " Game "
        },
        "IsClient": {
            "params": [],
            "description": "Used to check if a script currently runs on the client.",
            "syntax": "IsClient()",
            "return": "Returns '''true''' on the client and '''false''' on the server.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.4.0"
            },
            "category": " Game "
        },
        "CopyToClipboard": {
            "params": [
                {
                    "name": "text",
                    "description": "The text to copy."
                }
            ],
            "description": "Copy text to the clipboard. Only works in dev mode.",
            "syntax": "CopyToClipboard(text)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Game "
        },
        "RGBA": {
            "params": [
                {
                    "name": "r",
                    "description": "The red"
                },
                {
                    "name": "g",
                    "description": "The green"
                },
                {
                    "name": "b",
                    "description": "The blue"
                },
                {
                    "name": "a",
                    "description": "The alpha opacity"
                }
            ],
            "description": "Converts RGBA to an integer. All values (including alpha) must be between 0 to 255. ",
            "syntax": "RGBA(r, g, b, a)",
            "return": "Returns the color as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Colors "
        },
        "RGB": {
            "params": [
                {
                    "name": "r",
                    "description": "The red"
                },
                {
                    "name": "g",
                    "description": "The green"
                },
                {
                    "name": "b ",
                    "description": "The blue"
                }
            ],
            "description": "Converts RGB to an integer. All values (including alpha) must be between 0 to 255.",
            "syntax": "RGB(r, g, b [, a])",
            "return": "Returns the color as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Colors "
        },
        "HexToRGBA": {
            "params": [
                {
                    "name": "HexColor",
                    "description": "Color in integer format"
                }
            ],
            "description": "Converts an integer color value to the RGB format.",
            "syntax": "HexToRGBA(HexColor)",
            "return": "R, G, B, A values between 0 and 255",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Colors "
        },
        "LineTrace": {
            "params": [
                {
                    "name": "sX",
                    "description": "The start X axis"
                },
                {
                    "name": "sY",
                    "description": "The start Y axis"
                },
                {
                    "name": "sZ",
                    "description": "The start Z axis"
                },
                {
                    "name": "eX",
                    "description": "The end X axis"
                },
                {
                    "name": "eY",
                    "description": "The end Y axis"
                },
                {
                    "name": "eZ ",
                    "description": "The end Z axis"
                }
            ],
            "description": "Trace a line through the specified coordinates and return the [[HitType]] entity type, identifier and the impact coordinates.",
            "syntax": "LineTrace(sX, sY, sZ, eX, eY, eZ [, complex])",
            "return": "[[HitTy",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "createtable_ex": {
            "params": [
                {
                    "name": "metatable",
                    "description": "The metatable to set."
                }
            ],
            "description": "Creates a new table and sets the metatable.",
            "syntax": "createtable_ex(metatable)",
            "return": "Returns a new table with the desired metatable.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "GetCameraFoV": {
            "params": [],
            "description": "Gets clients current FOV value",
            "syntax": "GetCameraFoV()",
            "return": "Returns clients current FOV value",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "SetCameraFoV": {
            "params": [
                {
                    "name": "fov",
                    "description": "The field of view in floating point value."
                }
            ],
            "description": "Set the client's field of view (FOV).",
            "syntax": "SetCameraFoV(fov)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "Random": {
            "params": [],
            "description": "Get a pseudo-random number. Negative ranges are supported as of v1.0.2.",
            "syntax": "Random([Min, Max])",
            "return": "Returns the random between the range.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "RandomFloat": {
            "params": [],
            "description": "Get a pseudo-random float. Negative ranges are supported as of v1.0.2.",
            "syntax": "RandomFloat([, Min, Max])",
            "return": "Returns the random float between the range.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "Base64Encode": {
            "params": [
                {
                    "name": "text",
                    "description": "the text."
                }
            ],
            "description": "Encodes the specified text in the Base64 format.",
            "syntax": "Base64Encode(text)",
            "return": "",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "Base64Decode": {
            "params": [
                {
                    "name": "base64",
                    "description": "The base64 string."
                }
            ],
            "description": "Decodes the Base64 into text.",
            "syntax": "Base64Decode(base64)",
            "return": "Text string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "GetDistance2D": {
            "params": [
                {
                    "name": "x",
                    "description": "x of the first point."
                },
                {
                    "name": "y",
                    "description": "y of the first point."
                },
                {
                    "name": "x2",
                    "description": "x of the second point."
                },
                {
                    "name": "y2",
                    "description": "y of the second point."
                }
            ],
            "description": "Calculates the distance between 2 points.",
            "syntax": "GetDistance2D(x, y, x2, y2)",
            "return": "The distance between the 2 points.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "GetDistance3D": {
            "params": [
                {
                    "name": "x",
                    "description": "x of the first point."
                },
                {
                    "name": "y",
                    "description": "y of the first point."
                },
                {
                    "name": "z",
                    "description": "z of the first point."
                },
                {
                    "name": "x2",
                    "description": "x of the second point."
                },
                {
                    "name": "y2",
                    "description": "y of the second point."
                },
                {
                    "name": "z2",
                    "description": "z of the second point."
                }
            ],
            "description": "Gets the distance in centimeters between 3 dimensional points.",
            "syntax": "GetDistance3D(x, y, z, x2, y2, z2)",
            "return": "The distance between the 2 points in centimeters.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "GetDistanceSquared3D": {
            "params": [
                {
                    "name": "x",
                    "description": "x of the first point."
                },
                {
                    "name": "y",
                    "description": "y of the first point."
                },
                {
                    "name": "z",
                    "description": "z of the first point."
                },
                {
                    "name": "x2",
                    "description": "x of the second point."
                },
                {
                    "name": "y2",
                    "description": "y of the second point."
                },
                {
                    "name": "z2",
                    "description": "z of the second point."
                }
            ],
            "description": "Get the distance between points squared in relation to the three dimensions.",
            "syntax": "GetDistanceSquared3D(x, y, z, x2, y2, z2)",
            "return": "The square of the distance between the 2 points.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "Lerp": {
            "params": [
                {
                    "name": "t",
                    "description": "The interpolant, normally between 0.0 and 1.0"
                },
                {
                    "name": "a",
                    "description": "Interpolate from."
                },
                {
                    "name": "b",
                    "description": "Interpolate to."
                }
            ],
            "description": "Interpolates between a and b with the parameter t. ",
            "syntax": "Lerp(t, a, b)",
            "return": "Returns the interpolated value.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0.3"
            },
            "category": " Miscellaneous "
        },
        "LerpVector": {
            "params": [
                {
                    "name": "t",
                    "description": "The interpolant, normally between 0.0 and 1.0"
                },
                {
                    "name": "aX",
                    "description": "Interpolate from X."
                },
                {
                    "name": "aY",
                    "description": "Interpolate from Y."
                },
                {
                    "name": "aZ",
                    "description": "Interpolate from Z."
                },
                {
                    "name": "bX",
                    "description": "Interpolate to X."
                },
                {
                    "name": "bY",
                    "description": "Interpolate to Y."
                },
                {
                    "name": "bZ",
                    "description": "Interpolate to Z."
                }
            ],
            "description": "Interpolates between vector A and vector B with the parameter t. ",
            "syntax": "LerpVector(t, aX, aY, aZ, bX, bY, bZ)",
            "return": "Returns the interpolated vector (3 floats).",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0.3"
            },
            "category": " Miscellaneous "
        },
        "VectorToRotation": {
            "params": [
                {
                    "name": "x",
                    "description": "The point at X axis."
                },
                {
                    "name": "y",
                    "description": "The point at Y axis."
                },
                {
                    "name": "z",
                    "description": "The point at Z axis."
                }
            ],
            "description": "Converts the XYZ vectors into rotatio",
            "syntax": "VectorToRotation(x, y, z)",
            "return": "Returns 3 float values, Pitch, Yaw, Roll",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "RotationToVector": {
            "params": [
                {
                    "name": "rx",
                    "description": "The rotation at X axis."
                },
                {
                    "name": "ry",
                    "description": "The rotation at Y axis."
                },
                {
                    "name": "rz",
                    "description": "The rotation at Z axis."
                }
            ],
            "description": "Converts the given rotation into XYZ vector",
            "syntax": "RotationToVector(rx, ry, rz)",
            "return": "Returns 3 float values, X, Y, Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "NormalizeVector": {
            "params": [
                {
                    "name": "x",
                    "description": "Vector X"
                },
                {
                    "name": "y",
                    "description": "Vector Y"
                },
                {
                    "name": "z",
                    "description": "Vector Z"
                }
            ],
            "description": "Normalizes a vector",
            "syntax": "NormalizeVector(x, y, z)",
            "return": "Returns normalized vector, 3 float values X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "IsFloatNearlyZero": {
            "params": [
                {
                    "name": "Value",
                    "description": "The float value"
                }
            ],
            "description": "Checks if a float value is nearly zero.",
            "syntax": "IsFloatNearlyZero(Value)",
            "return": "Returns '''true''' if success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "RandomUnitVectorInCone\u200e\u200e": {
            "params": [
                {
                    "name": "x",
                    "description": "Center X of the cone."
                },
                {
                    "name": "y",
                    "description": "Center X of the cone."
                },
                {
                    "name": "z",
                    "description": "Center X of the cone."
                },
                {
                    "name": "HalfAngle",
                    "description": "Half the angle of the cone in degrees."
                }
            ],
            "description": "Returns a normalized vector (length 1) that is inside the specified cone.",
            "syntax": "RandomUnitVectorInCone(x, y, z, HalfAngle)",
            "return": "Return a unit vector.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "RandomUnitVectorInEllipticalCone": {
            "params": [
                {
                    "name": "x",
                    "description": "Center X of the cone."
                },
                {
                    "name": "y",
                    "description": "Center X of the cone."
                },
                {
                    "name": "z",
                    "description": "Center X of the cone."
                },
                {
                    "name": "MaxYaw",
                    "description": "Yaw angle of the cone in degrees. (Center to horizontal edge)"
                },
                {
                    "name": "MaxPitch",
                    "description": "Pitch angle of the cone in degrees. (Center to vertical edge)"
                }
            ],
            "description": "Returns a normalized vector (length 1) that is inside the specified cone.",
            "syntax": "RandomUnitVectorInEllipticalCone(x, y, z, MaxYaw, MaxPitch)",
            "return": "Returns an unit vector.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Miscellaneous "
        },
        "UpdateStreamingLevels": {
            "params": [],
            "description": "Tells the engine to look if the level streaming needs an update. The engine does this automatically but in some circumstances you might want to explicitly tell the engine to update. For instance after teleporting a player far away on the map you can call this function with a little delay of 50ms after the teleport. Sometimes it's necessary to call it multiple times.",
            "syntax": "UpdateStreamingLevels()",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": " Miscellaneous "
        },
        "GetTickCount": {
            "params": [],
            "description": "Returns the uptime of the actual computer (not the Onset application) in milliseconds.",
            "syntax": "GetTickCount()",
            "return": "Uptime of the actual computer (not the Onset application)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Time "
        },
        "GetTimeSeconds": {
            "params": [],
            "description": "Returns the amount of time since the game or server started up.",
            "syntax": "GetTimeSeconds()",
            "return": "Returns a float value of the amount of time passed since the server started.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Time "
        },
        "GetDeltaSeconds": {
            "params": [],
            "description": "Gets the time between game ticks/frames.",
            "syntax": "GetDeltaSeconds()",
            "return": "Returns the delta time between the last game ticks/frames.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Time "
        },
        "TogglePlayerTag": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "tagname",
                    "description": "Tag as a string. Valid tags are: 'name', 'health', 'armor', 'voice'."
                },
                {
                    "name": "toggle",
                    "description": "'''true''' to enable, '''false''' to disable."
                }
            ],
            "description": "Enables or disables a tag above a players head.",
            "syntax": "TogglePlayerTag(player, tagname, toggle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.1.0"
            },
            "category": " Player "
        },
        "SetPlayerVoiceTone": {
            "params": [
                {
                    "name": "playerId",
                    "description": "The player identifier."
                },
                {
                    "name": "VoiceTone",
                    "description": "The voice tone as a string: '''male''' or '''female'''."
                }
            ],
            "description": "Switches the player voice tone.",
            "syntax": "SetPlayerVoiceTone(playerId, VoiceTone)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.1.0"
            },
            "category": " Player "
        },
        "GetPlayerActor": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the player. Can then be used with [[UnrealLua]].",
            "syntax": "GetPlayerActor(playerid)",
            "return": "Returns a reference to the Unreal Actor on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerSkeletalMeshComponent": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "ComponentName",
                    "description": "Name of which SK component to get. Can be '''Body''', '''WeaponMesh''', '''Clothing0''', '''Clothing1''', '''Clothing2''', '''Clothing3''', '''Clothing4''', '''Clothing5''', '''Clothing6''', '''Clothing7''', '''Clothing8''', '''Clothing9'''"
                }
            ],
            "description": "Gets the skeletal mesh component of a player.",
            "syntax": "GetPlayerSkeletalMeshComponent(player, ComponentName)",
            "return": "Returns the skeletal mesh component. [[UnrealLua]]",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerId": {
            "params": [],
            "description": "Return id of the player.",
            "syntax": "GetPlayerId()",
            "return": "Returns playerid.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerPropertyValue": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetPlayerPropertyValue(player, PropertyName, Value[, bSync])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerPropertyValue": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetPlayerPropertyValue(player, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerRotationRate": {
            "params": [
                {
                    "name": "RotationRate",
                    "description": "Float value between -720.0 and 720.0"
                }
            ],
            "description": "Sets the speed of the players rotation.",
            "syntax": "SetPlayerRotationRate(RotationRate)",
            "return": "True on success",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerRotationRate": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "GetPlayerRotationRate()",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerJumpZVelocity": {
            "params": [
                {
                    "name": "JumpZVelocity",
                    "description": "The velocity as a float, default: 540.0"
                }
            ],
            "description": "Sets the jump Z velocity. How high/fast a player can jump.",
            "syntax": "SetPlayerJumpZVelocity(JumpZVelocity)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerJumpZVelocity": {
            "params": [],
            "description": "Get the jump Z velocity. Use [[SetPlayerJumpZVelocity]] to set it.",
            "syntax": "GetPlayerJumpZVelocity()",
            "return": "Returns the jump Z velocity as a float.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerWeapon": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the specified player's weapon id, ammo, ammo in magazine in the specified weapon slot.",
            "syntax": "GetPlayerWeapon(player [, weaponslot])",
            "return": "Returns weapon id, ammo.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetWeaponType": {
            "params": [
                {
                    "name": "WeaponModelId",
                    "description": "The weapon model identifier."
                }
            ],
            "description": "Gets the type of a specific weapon model. You can get the weapon model from [[GetPlayerWeapon]].",
            "syntax": "GetWeaponType(WeaponModelId)",
            "return": "Returns two integers. The first one being the main weapon type and the second one the weapon sub type.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerWeaponMuzzleLocation": {
            "params": [],
            "description": "Gets the muzzle location of a weapon that a specific player is holding in world space.",
            "syntax": "GetPlayerWeaponMuzzleLocation([, player])",
            "return": "Returns the muzzle location X, Y, Z in world space.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerBoneNames": {
            "params": [],
            "description": "Returns a table containing the bone names of the player skeleton dynamically. Useful for [[GetPlayerBoneLocation]].",
            "syntax": "GetPlayerBoneNames()",
            "return": "Returns a table with the bone names.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetAllPlayersInSphere": {
            "params": [
                {
                    "name": "x",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "y",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "z",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "radius ",
                    "description": "__EDIT_ME__"
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "GetAllPlayersInSphere(x, y, z, radius [, bIncludeSelf])",
            "return": "Returns a table with player identifiers as value.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetAllPlayersInBox": {
            "params": [
                {
                    "name": "x",
                    "description": "The box X location."
                },
                {
                    "name": "y",
                    "description": "The box Y location."
                },
                {
                    "name": "z",
                    "description": "The box Z location."
                },
                {
                    "name": "bx",
                    "description": "The box X extent."
                },
                {
                    "name": "by",
                    "description": "The box Y extent."
                },
                {
                    "name": "bz",
                    "description": "The box Z extent."
                }
            ],
            "description": "Gets a table of players that are inside a specific box area.",
            "syntax": "GetAllPlayersInBox(x, y, z, bx, by, bz [, bIncludeSelf])",
            "return": "Returns a table with player identifiers as value.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetTerrainHeight": {
            "params": [
                {
                    "name": "sX",
                    "description": "X float value"
                },
                {
                    "name": "sY",
                    "description": "Y float value"
                },
                {
                    "name": "sZ",
                    "description": "Z float value"
                }
            ],
            "description": "Creates a linetrace from the given coordiantes facing downwards and returns the Z value of the first hit object.",
            "syntax": "GetTerrainHeight(sX, sY, sZ)",
            "return": "Returns Z value of first hit object, else returns false",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "EnableFirstPersonCamera": {
            "params": [
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable, '''false''' to disable."
                }
            ],
            "description": "Switches the player camera between 1st and 3rd person.",
            "syntax": "EnableFirstPersonCamera(bEnable)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsFirstPersonCamera": {
            "params": [],
            "description": "Check if the first person camera is enabled from [[EnableFirstPersonCamera]].",
            "syntax": "IsFirstPersonCamera()",
            "return": "Returns '''true''' if the 1st person mode/camera is enabled.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetControllerOrientedMovement": {
            "params": [
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable"
                }
            ],
            "description": "Makes the player mesh to control like in first person. Meaning when you press 'S' the character won't turn backwards but rather just walk backwards.",
            "syntax": "SetControllerOrientedMovement(bEnable)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsValidPlayer": {
            "params": [
                {
                    "name": "player",
                    "description": "The player id"
                }
            ],
            "description": "Checks whether the specified player is connected to the server or not.",
            "syntax": "IsValidPlayer(player)",
            "return": "Returns '''true''' if the player is connected, otherwise '''false'''.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerName": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get a players Steam nickname/username.",
            "syntax": "GetPlayerName(player)",
            "return": "Returns the Steam username as shown on their profile. Max length: 32. If [[SetPlayerName]] was called then it will return the value passed there.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetStreamedPlayers": {
            "params": [],
            "description": "Returns a table of player identifiers streamed in for the client.",
            "syntax": "GetStreamedPlayers()",
            "return": "A table with player identifiers if any else nil.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerLocation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier. On the client this parameter is optional and will return the local player location if not set."
                }
            ],
            "description": "Get the specified client's location.",
            "syntax": "GetPlayerLocation(player)",
            "return": "Returns three float value X, Y, Z representing the players location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerHeading": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the specified player's heading (rotation).",
            "syntax": "GetPlayerHeading(player)",
            "return": "This function returns heading in float.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsPlayerTalking": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is talking or not.",
            "syntax": "IsPlayerTalking(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerHealth": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the specified player's health.",
            "syntax": "GetPlayerHealth(player)",
            "return": "Returns the player's health in floating point number.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerArmor": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the armor health of the specified player.",
            "syntax": "GetPlayerArmor(player)",
            "return": "The armor value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerMovementMode": {
            "params": [
                {
                    "name": "player",
                    "description": "The player"
                }
            ],
            "description": "Returns the players movement mode",
            "syntax": "GetPlayerMovementMode(player)",
            "return": "Returns the [[MovementModes]]",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerMovementSpeed": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Get the player's movement speed.",
            "syntax": "GetPlayerMovementSpeed(player)",
            "return": "Returns the movement speed as a float.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsPlayerAiming": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is aiming or not.",
            "syntax": "IsPlayerAiming(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsPlayerReloading": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is reloading a gun or not.",
            "syntax": "IsPlayerReloading(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsPlayerDead": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Check if a player is dead.",
            "syntax": "IsPlayerDead(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerBoneLocation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "BoneName ",
                    "description": "The bone name"
                }
            ],
            "description": "This function returns the bone location of the player.",
            "syntax": "GetPlayerBoneLocation(player, BoneName [, BoneSpace = 1])",
            "return": "Returns X, Y, Z of the bone location.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerOutline": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Creates an outline around the player mesh.",
            "syntax": "SetPlayerOutline(player [, bEnable])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerClothingPreset": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "clothing_preset",
                    "description": "The clothing preset ."
                }
            ],
            "description": "This function sets a predefined clothing preset on a player. This is for people who are not interested in setting each clothing item [[ClothingExample]].",
            "syntax": "SetPlayerClothingPreset(player, clothing_preset)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Returns the vehicle identifier the player is in.",
            "syntax": "GetPlayerVehicle(player)",
            "return": "Returns the vehicle identifier the player is in. Returns '''0''' if not in any vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "IsPlayerInVehicle": {
            "params": [],
            "description": "Check if player is in vehicle or not.",
            "syntax": "IsPlayerInVehicle( [, player])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerVehicleSeat": {
            "params": [
                {
                    "name": "player",
                    "description": "Player whos seat you want to get"
                }
            ],
            "description": "Gets the vehicle seat a player is.",
            "syntax": "GetPlayerVehicleSeat(player)",
            "return": "ID of the vehicle seat player is in",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerEquippedWeaponSlot": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                }
            ],
            "description": "Returns the slot the player currently has equiped",
            "syntax": "GetPlayerEquippedWeaponSlot(player)",
            "return": "The weapon slot the player currently has equipped",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerForwardVector": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Gets the normalized forward vector.",
            "syntax": "GetPlayerForwardVector(player)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerRightVector": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Gets the normalized right vector.",
            "syntax": "GetPlayerRightVector(player)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetPlayerUpVector": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Gets the normalized up vector.",
            "syntax": "GetPlayerUpVector(player)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "GetVehicleActor": {
            "params": [
                {
                    "name": "vehicleid",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the Vehicle.",
            "syntax": "GetVehicleActor(vehicleid)",
            "return": "Returns Unreal Actor Id on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "SetPlayerLipMovement": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Makes the lips of a player look like they are talking for a second. To be used in [[OnPlayerTalking]].",
            "syntax": "SetPlayerLipMovement(player)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": " Player "
        },
        "IsPlayerPlayingAnimation": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Detect if the player current plays an animation from [[SetPlayerAnimation]].",
            "syntax": "IsPlayerPlayingAnimation(player)",
            "return": "Returns '''true''' if the player currently is in an animation state.",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": " Player "
        },
        "GetPlayerCount": {
            "params": [],
            "description": "Gets the count of the online players. On the client it only returns the number of streamed in players.",
            "syntax": "GetPlayerCount()",
            "return": "Count of players.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Player "
        },
        "CancelAimImmediately": {
            "params": [],
            "description": "Cancel the aim state when a player is aiming with a gun. To prevent a player from aiming you can use [[OnPlayerToggleAim]].",
            "syntax": "CancelAimImmediately()",
            "return": "Returns no specific value.",
            "info": {
                "context": "Client",
                "introduced": "1.2.0"
            },
            "category": " Player "
        },
        "StartCameraFade": {
            "params": [
                {
                    "name": "FromAlpha",
                    "description": "Starting alpha (0-1)"
                },
                {
                    "name": "ToAlpha",
                    "description": "Alpha you want to fade to (0-1)"
                },
                {
                    "name": "Duration",
                    "description": "Duration of the fade in seconds"
                }
            ],
            "description": "Smoothly fade in or out, setting CameraFade will overwrite any other started camera fades which were called before. The fading will no persist after the fade duration.",
            "syntax": "StartCameraFade(FromAlpha, ToAlpha, Duration [, IntColor])",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "StopCameraFade": {
            "params": [],
            "description": "Stops the camera fade effect.",
            "syntax": "StopCameraFade()",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "PlayCameraShake": {
            "params": [
                {
                    "name": "Duration ",
                    "description": "The duration in milliseconds."
                },
                {
                    "name": "BlendInTime",
                    "description": "The blend-in time."
                },
                {
                    "name": "BlendOutTime",
                    "description": "The blen-out time."
                }
            ],
            "description": "Make the player's camera shake using [[StopCameraShake]].",
            "syntax": "PlayCameraShake(Duration [, BlendInTime, BlendOutTime, Scale])",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "StopCameraShake": {
            "params": [],
            "description": "Stop the camera shake of the client.",
            "syntax": "StopCameraShake( [, bImmediate])",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraShakeLocation": {
            "params": [
                {
                    "name": "XAmp",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "XFreq",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "YAmp",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "YFreq",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "ZAmp",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "ZFreq",
                    "description": "__EDIT_ME__"
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "SetCameraShakeLocation(XAmp, XFreq, YAmp, YFreq, ZAmp, ZFreq)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraShakeRotation": {
            "params": [
                {
                    "name": "PitchAmp",
                    "description": "The pitch amplitude in floating point value."
                },
                {
                    "name": "PitchFreq",
                    "description": "The pitch frequency in floating point value."
                },
                {
                    "name": "YawAmp",
                    "description": "The yaw amplitude in floating point value."
                },
                {
                    "name": "YawFreq",
                    "description": "The yaw frequency in floating point value."
                },
                {
                    "name": "RollAmp",
                    "description": "The rolling amplitude in floating point value."
                },
                {
                    "name": "RollFreq",
                    "description": "The roll frequency in floating point value."
                }
            ],
            "description": "Set the camera shake rotation properties.",
            "syntax": "SetCameraShakeRotation(PitchAmp, PitchFreq, YawAmp, YawFreq, RollAmp, RollFreq)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraShakeFOV": {
            "params": [
                {
                    "name": "FOVAmp",
                    "description": "Set the FOV amplitude."
                },
                {
                    "name": "FOVFreq",
                    "description": "Set the FOV frequency."
                }
            ],
            "description": "Set the camera shake's field of view.",
            "syntax": "SetCameraShakeFOV(FOVAmp, FOVFreq)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetScreenSize": {
            "params": [],
            "description": "Get the client's screen size",
            "syntax": "GetScreenSize()",
            "return": "Get the client's screen size",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraLocation": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Set the camera location.",
            "syntax": "SetCameraLocation(x, y, z [, bWorldSpace])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraLocation": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "GetCameraLocation([bSpectateCamera])",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraRotation": {
            "params": [
                {
                    "name": "pitch",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "yaw",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "roll ",
                    "description": "__EDIT_ME__"
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "SetCameraRotation(pitch, yaw, roll [, bWorldSpace])",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraRotation": {
            "params": [],
            "description": "Get the camera rotation",
            "syntax": "GetCameraRotation([bSpectateCamera])",
            "return": "This function returns the camera rotation.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraForwardVector": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "GetCameraForwardVector()",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraRightVector": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "GetPlayerCameraRightVector()",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraUpVector": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "GetCameraUpVector()",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "SetCameraViewDistance": {
            "params": [
                {
                    "name": "distance",
                    "description": "The distance"
                }
            ],
            "description": "Sets the player's camera view distance. The default camera view distance for players on-foot is 350.0 units.",
            "syntax": "SetCameraViewDistance(distance)",
            "return": "This function returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "GetCameraViewDistance": {
            "params": [],
            "description": "Gets the player's camera view distance.",
            "syntax": "GetPlayerCameraViewDistance()",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Camera "
        },
        "CreateWaypoint": {
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate X"
                },
                {
                    "name": "y",
                    "description": "Coordinate Y"
                },
                {
                    "name": "z",
                    "description": "Coordinate Z"
                },
                {
                    "name": "text",
                    "description": "Text that appears on the waypoint. Pass an empty string to remove a waypoint."
                }
            ],
            "description": "Creates a waypoint in the world. Distance is calculated automatically and shown to the player.",
            "syntax": "CreateWaypoint(x, y, z, text)",
            "return": "Returns the waypoint identifier.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "DestroyWaypoint": {
            "params": [
                {
                    "name": "waypointId",
                    "description": "The waypoint identifier."
                }
            ],
            "description": "Destroys an already created waypoint.",
            "syntax": "DestroyWaypoint(waypointid)",
            "return": "Returns the waypoint identifier.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "SetWaypointText": {
            "params": [
                {
                    "name": "waypointId",
                    "description": "The waypoint identifier."
                },
                {
                    "name": "text",
                    "description": "the text."
                }
            ],
            "description": "Updates the specified waypoint Id text.",
            "syntax": "SetWaypointText(waypointId, text)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "SetWaypointLocation": {
            "params": [
                {
                    "name": "waypointId",
                    "description": "The waypoint identifier."
                },
                {
                    "name": "x",
                    "description": "The x axis."
                },
                {
                    "name": "y",
                    "description": "The y axis."
                },
                {
                    "name": "z",
                    "description": "The z axis."
                }
            ],
            "description": "Sets the specified waypoint location.",
            "syntax": "SetWaypointLocation(waypointId, x, y, z)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "GetWaypointLocation": {
            "params": [],
            "description": "Gets the specified waypoint location.",
            "syntax": "GetWaypointLocation(waypointId)",
            "return": "This function gets the waypoint XYZ vector.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "GetAllWaypoints": {
            "params": [],
            "description": "Gets all the waypoint IDs in a table.",
            "syntax": "GetAllWaypoints()",
            "return": "This function returns a table.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Waypoints "
        },
        "CreateFireworks": {
            "params": [
                {
                    "name": "modelid",
                    "description": "Id for fireworks preset (1-13)."
                },
                {
                    "name": "x",
                    "description": "World X location."
                },
                {
                    "name": "y",
                    "description": "World Y location."
                },
                {
                    "name": "z",
                    "description": "World Z location."
                },
                {
                    "name": "rx",
                    "description": "Pitch rotation. Should be 90.0 to have the fireworks shoot up."
                },
                {
                    "name": "ry",
                    "description": "Yaw rotation."
                },
                {
                    "name": "rz",
                    "description": "Roll rotation."
                }
            ],
            "description": "Creates fireworks that shoot upwards and explode. ModelId presets contain various shapes/styles of fireworks.",
            "syntax": "CreateFireworks(modelid, x, y, z, rx, ry, rz)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Fireworks "
        },
        "GetPackageName": {
            "params": [],
            "description": "Get name of the package from where this function is called from.",
            "syntax": "GetPackageName()",
            "return": "Returns the package name as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Packages "
        },
        "ImportPackage": {
            "params": [
                {
                    "name": "PackageName",
                    "description": "Name of the package to import. Must be loaded before this one."
                }
            ],
            "description": "Creates a table holding all exported functions by another packag",
            "syntax": "ImportPackage(PackageName)",
            "return": "Creates a table holding the other packages exported functions. Return '''nil''' if PackageName does not exist.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Packages "
        },
        "AddFunctionExport": {
            "params": [
                {
                    "name": "ExportName",
                    "description": "Name of the export. Commonly the name of the exported function."
                },
                {
                    "name": "ExportFunction",
                    "description": "Function to export."
                }
            ],
            "description": "Exports a function that can later be imported from another package.",
            "syntax": "AddFunctionExport(ExportName, ExportFunction)",
            "return": "Returns '''true''' on success. Return '''false''' if the export already exists.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Packages "
        },
        "AddPlayerChat": {
            "params": [
                {
                    "name": "player",
                    "description": "The player indentifier."
                },
                {
                    "name": "message",
                    "description": "The chat message."
                }
            ],
            "description": "Adds (or sends) the specified player or client a messag",
            "syntax": "AddPlayerChat(player, message)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Chat "
        },
        "IsChatFocus": {
            "params": [],
            "description": "Check if the chat is in focus for the client.",
            "syntax": "IsChatFocus()",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Chat "
        },
        "ShowChat": {
            "params": [
                {
                    "name": "show",
                    "description": "The boolean status (true/ false)"
                }
            ],
            "description": "To toggle the chat for the client.",
            "syntax": "ShowChat(show)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Chat "
        },
        "SetChatLocation": {
            "params": [
                {
                    "name": "x",
                    "description": "The Screen X axis"
                },
                {
                    "name": "y",
                    "description": "The Screen Y axis"
                }
            ],
            "description": "Set the client's chat location position.",
            "syntax": "SetChatLocation(x, y)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Chat "
        },
        "GetChatLocation": {
            "params": [],
            "description": "Get the player's chat screen location.",
            "syntax": "GetChatLocation()",
            "return": "This function returns the X and Y axis vectors.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Chat "
        },
        "ShowWeaponHUD": {
            "params": [
                {
                    "name": "bShow",
                    "description": "the boolean status."
                }
            ],
            "description": "Toggle the weapon HUD.",
            "syntax": "ShowWeaponHUD(bShow)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " HUDs "
        },
        "ShowHealthHUD": {
            "params": [
                {
                    "name": "show",
                    "description": "The boolean status whether to show or hide the HUD"
                }
            ],
            "description": "Toggle the health HUD for the client.",
            "syntax": "ShowHealthHUD(show)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " HUDs "
        },
        "NotifyCrosshairHit": {
            "params": [],
            "description": "Tells the system that the crosshair should be shown/played, for example when hitting an enemy.",
            "syntax": "NotifyCrosshairHit()",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " HUDs "
        },
        "SetPostEffect": {
            "params": [
                {
                    "name": "CategoryName",
                    "description": "Effect category."
                },
                {
                    "name": "SettingName",
                    "description": "Effect name."
                },
                {
                    "name": "Value",
                    "description": "Effect value, can be float or RGBA value. Pass '''false''' to disable the effect (Or sometimes applies its default value.)"
                }
            ],
            "description": "Sets post processing effects ([[SetPostProcessData]]).",
            "syntax": "SetPostEffect(CategoryName, SettingName, Value)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Post-processing "
        },
        "AddPostProcessMaterial": {
            "params": [
                {
                    "name": "SlotName",
                    "description": "A name of your choice. This can be anything and is used so you can remove the material again with [[RemovePostProcessMaterial]]."
                },
                {
                    "name": "UMaterialInterface",
                    "description": "The material asset. Load it with UMaterialInterface.LoadFromAsset()"
                }
            ],
            "description": "Adds a post process material to the global post process volume. The material itself must be loaded with in a pak fil",
            "syntax": "AddPostProcessMaterial(SlotName, UMaterialInterface)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Post-processing "
        },
        "RemovePostProcessMaterial": {
            "params": [
                {
                    "name": "SlotName",
                    "description": "Name of the slot to remove. [[AddPostProcessMaterial]]."
                }
            ],
            "description": "Removes a post process material that was previously added with [[AddPostProcessMaterial]]",
            "syntax": "RemovePostProcessMaterial(SlotName)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Post-processing "
        },
        "DrawText": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis on the screen."
                },
                {
                    "name": "y",
                    "description": "The Y axis on the screen."
                },
                {
                    "name": "text",
                    "description": "The text you want to draw on the client screen."
                }
            ],
            "description": "Draws a text on the player screen.  The X and Y axis are the screen coordinates which start from upper-left corner instead of center.",
            "syntax": "DrawText(x, y, text)",
            "return": "Returns '''nil'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetDrawColor": {
            "params": [
                {
                    "name": "IntColor",
                    "description": "Color as an integer from [[RGBA]]."
                }
            ],
            "description": "Sets the color that will be used by all Draw* functions.",
            "syntax": "SetDrawColor(IntColor)",
            "return": "Returns ''true''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetTextDrawScale": {
            "params": [
                {
                    "name": "sx",
                    "description": "Draw X scale between 0.0 and 128.0"
                },
                {
                    "name": "sy",
                    "description": "Draw Y scale between 0.0 and 128.0"
                }
            ],
            "description": "Sets the draw scale for the DrawText function.",
            "syntax": "SetTextDrawScale(sx, sy)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "GetTextSize": {
            "params": [
                {
                    "name": "text",
                    "description": "The text which we would like to know the width and height from."
                }
            ],
            "description": "Gets the size (width and height) of a text.",
            "syntax": "GetTextSize(text [, Scale])",
            "return": "Returns two float values: width, height",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawLine": {
            "params": [
                {
                    "name": "sX",
                    "description": "Start X location."
                },
                {
                    "name": "sY",
                    "description": "Start Y location."
                },
                {
                    "name": "eX",
                    "description": "End X location."
                },
                {
                    "name": "eY",
                    "description": "End Y location."
                }
            ],
            "description": "Draws a line in screen space.",
            "syntax": "DrawLine(sX, sY, eX, eY [, thickness])",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawLine3D": {
            "params": [
                {
                    "name": "sX",
                    "description": "Start X location."
                },
                {
                    "name": "sY",
                    "description": "Start Y location."
                },
                {
                    "name": "sZ",
                    "description": "Start Z location."
                },
                {
                    "name": "eX",
                    "description": "End X location."
                },
                {
                    "name": "eY",
                    "description": "End Y location."
                },
                {
                    "name": "eZ",
                    "description": "End Z location."
                }
            ],
            "description": "Draws a line in 3d space.",
            "syntax": "DrawLine3D(sX, sY, sZ, eX, eY, eZ [, thickness, bForeground])",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawPoint3D": {
            "params": [
                {
                    "name": "x",
                    "description": "World X location"
                },
                {
                    "name": "y",
                    "description": "World Y location"
                },
                {
                    "name": "z",
                    "description": "World Z location"
                }
            ],
            "description": "Draws a point in 3d space.",
            "syntax": "DrawPoint3D(x, y, z [, PointSize, bForeground])",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawCircle3D": {
            "params": [
                {
                    "name": "x",
                    "description": "World X location."
                },
                {
                    "name": "y",
                    "description": "World Y location."
                },
                {
                    "name": "z",
                    "description": "World Z location."
                },
                {
                    "name": "XAxisX",
                    "description": "X axis alignment of the circle"
                },
                {
                    "name": "XAxisY",
                    "description": "X axis alignment of the circle"
                },
                {
                    "name": "XAxisZ",
                    "description": "X axis alignment of the circle"
                },
                {
                    "name": "YAxisX",
                    "description": "Y axis alignment of the circle"
                },
                {
                    "name": "YAxisY",
                    "description": "Y axis alignment of the circle"
                },
                {
                    "name": "YAxisZ",
                    "description": "Y axis alignment of the circle"
                }
            ],
            "description": "Draws a circle in 3d space.",
            "syntax": "DrawCircle3D(x, y, z, XAxisX, XAxisY, XAxisZ, YAxisX, YAxisY, YAxisZ [, Radius, bForeground])",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawBox": {
            "params": [
                {
                    "name": "sX",
                    "description": "Start X location."
                },
                {
                    "name": "sY",
                    "description": "Start Y location."
                },
                {
                    "name": "sW",
                    "description": "Width"
                },
                {
                    "name": "sH",
                    "description": "Height"
                }
            ],
            "description": "Draws a box in screen space.",
            "syntax": "DrawBox(sX, sY, sW, sH [, thickness])",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawRect": {
            "params": [
                {
                    "name": "sX",
                    "description": "Start X location."
                },
                {
                    "name": "sY",
                    "description": "Start Y location."
                },
                {
                    "name": "sW",
                    "description": "Width"
                },
                {
                    "name": "sH",
                    "description": "Height"
                }
            ],
            "description": "Draw rectangle in screen space.",
            "syntax": "DrawRect(sX, sY, sW, sH)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawTexture": {
            "params": [
                {
                    "name": "TextureReference",
                    "description": "Texture reference from LoadFromAsset or LoadFromFile."
                },
                {
                    "name": "ScreenX",
                    "description": "Screen X location."
                },
                {
                    "name": "ScreenY",
                    "description": "Screen Y location."
                },
                {
                    "name": "Scale",
                    "description": "Draw scale. (Use 1.0 for default)"
                },
                {
                    "name": "bScalePosition",
                    "description": "Whether the \"Scale\" parameter should also scale the position of this draw call. (Use '''false''' for default)"
                }
            ],
            "description": "Draws an UTexture on screen. https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/AHUD/DrawTextureSimple/index.html",
            "syntax": "DrawTexture(UTexture TextureReference, ScreenX, ScreenY, Scale, bScalePosition)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DrawTextureEx": {
            "params": [
                {
                    "name": "TextureReference",
                    "description": "Texture reference from LoadFromAsset or LoadFromFile."
                },
                {
                    "name": "ScreenX",
                    "description": "Screen X location."
                },
                {
                    "name": "ScreenY",
                    "description": "Screen Y location."
                },
                {
                    "name": "ScreenW",
                    "description": "Screen width."
                },
                {
                    "name": "ScreenH",
                    "description": "Screen height."
                },
                {
                    "name": "TextureU",
                    "description": "U coordinate."
                },
                {
                    "name": "TextureV",
                    "description": "V coordinate."
                },
                {
                    "name": "TextureUWidth",
                    "description": "Width of the quad (in normalized UV distance)."
                },
                {
                    "name": "TextureVHeight",
                    "description": "Height of the quad (in normalized UV distance)."
                },
                {
                    "name": "TintColor",
                    "description": "Tint color as FLinearColor."
                },
                {
                    "name": "BlendMode",
                    "description": "EBlendMode, use EBlendMode.BLEND_Translucent has default."
                },
                {
                    "name": "Scale",
                    "description": "Draw scale. (Use 1.0 for default)"
                },
                {
                    "name": "bScalePosition",
                    "description": "Boolean whether to scale or not."
                },
                {
                    "name": "Rotation",
                    "description": "Rotation of the drawing texture."
                },
                {
                    "name": "RotPivot",
                    "description": "The rotation pivot as a FVector2D."
                }
            ],
            "description": "Draws an UTexture on screen. https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/AHUD/DrawTexture/index.html",
            "syntax": "DrawTextureEx(UTexture TextureReference, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor, BlendMode, Scale, bScalePosition, Rotation, RotPivot)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "WorldToScreen": {
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate X in world space."
                },
                {
                    "name": "y",
                    "description": "Coordinate Y in world space."
                },
                {
                    "name": "z",
                    "description": "Coordinate Z in world space."
                }
            ],
            "description": "Projects a 3d world location into 2d screen space location. Also returns a bool indicating whether the 3d location is actually on the screen.",
            "syntax": "WorldToScreen(x, y, z)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "ScreenToWorld": {
            "params": [
                {
                    "name": "x",
                    "description": "Screen X coordinate."
                },
                {
                    "name": "y",
                    "description": "Screen Y coordinate."
                }
            ],
            "description": "Deprojects a 2D screen space into 3D world space.",
            "syntax": "ScreenToWorld(x, y)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "CreateTextBox": {
            "params": [
                {
                    "name": "x",
                    "description": "The screen X axis"
                },
                {
                    "name": "y",
                    "description": "The screen Y axis"
                },
                {
                    "name": "text",
                    "description": "The text you want"
                },
                {
                    "name": "justification",
                    "description": "Valid options as string: left (default), center, right "
                }
            ],
            "description": "Creates a text box on the player's screen.",
            "syntax": "CreateTextBox(x, y, text, justification)",
            "return": "Returns the identifier to the new text box.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "DestroyTextBox": {
            "params": [
                {
                    "name": "textid",
                    "description": "The text identifier."
                }
            ],
            "description": "Destroy a text box created with [[CreateTextBox]].",
            "syntax": "DestroyTextBox(textid)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetTextBoxAnchors": {
            "params": [
                {
                    "name": "textid",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "MinX",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "MinY",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "MaxX",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "MaxY",
                    "description": "__EDIT_ME__"
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "SetTextBoxAnchors(textid, MinX, MinY, MaxX, MaxY)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetTextBoxAlignment": {
            "params": [
                {
                    "name": "textid",
                    "description": "The text identifier"
                },
                {
                    "name": "x",
                    "description": "The screen X axis"
                },
                {
                    "name": "y",
                    "description": "The screen Y axis"
                }
            ],
            "description": "Sets the textbox alignment",
            "syntax": "SetTextBoxAlignment(textid, x, y)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetTextBoxText": {
            "params": [
                {
                    "name": "textid",
                    "description": "The text identifier."
                },
                {
                    "name": "text",
                    "description": "The string of the text you want to show."
                }
            ],
            "description": "Set the string of the specified text box.",
            "syntax": "SetTextBoxText(textid, text)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " GUI "
        },
        "SetOceanWaterLevel": {
            "params": [
                {
                    "name": "Level",
                    "description": "Water level from -200 to 10000"
                }
            ],
            "description": "Sets the ocean water level to a specific height. Basically the ''Z'' location (height).",
            "syntax": "SetOceanWaterLevel(Level [, bIncludeSwimmingVolume])",
            "return": "This function does not return anything.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Ocean "
        },
        "SetOceanColor": {
            "params": [
                {
                    "name": "WaveScatteringColor",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "WaveScatteringFade",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "ScatteringColor",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "WetColor",
                    "description": "__EDIT_ME__"
                },
                {
                    "name": "FogColor",
                    "description": "__EDIT_ME__"
                }
            ],
            "description": "Sets the upper ocean water color, variables are integers. Use [[RGBA]] to conversio",
            "syntax": "SetOceanColor(WaveScatteringColor, WaveScatteringFade, ScatteringColor, WetColor, FogColor)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Ocean "
        },
        "ResetOceanColor": {
            "params": [],
            "description": "Resets the original ocean color.",
            "syntax": "ResetOceanColor()",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Ocean "
        },
        "ShowMouseCursor": {
            "params": [
                {
                    "name": "bShow",
                    "description": "The boolean status"
                }
            ],
            "description": "Toggle the mouse cursor for the client.",
            "syntax": "ShowMouseCursor(bShow)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "GetMouseHitLocation": {
            "params": [],
            "description": "Gets the X, Y, Z world location below the mouse cursor. This basically traces from the position of the mouse cursor to the next colliding geometry in world spac",
            "syntax": "GetMouseHitLocation()",
            "return": "Returns 4 float values, X, Y, Z and distance.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "GetMouseHitEntity": {
            "params": [],
            "description": "Get entity type and identifier the mouse pointer hits. This basically traces from the position of the mouse cursor to the next colliding geometry in world space. ",
            "syntax": "GetMouseHitEntity()",
            "return": "Returns the hit entity type [[HitType]] and entity identifier.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "IsMouseCursorEnabled": {
            "params": [],
            "description": "Check if the player's mouse cursor is enabled.",
            "syntax": "IsMouseCursorEnabled()",
            "return": "Returns ''true'' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "SetMouseLocation": {
            "params": [
                {
                    "name": "mouseX",
                    "description": "The X coordinate to move the cursor to."
                },
                {
                    "name": "mouseY",
                    "description": "The Y coordinate to move the cursor to."
                }
            ],
            "description": "Sets the cursor's position on the screen. Only works within viewport aswell",
            "syntax": "SetMouseLocation(x, y)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "GetMouseLocation": {
            "params": [],
            "description": "Gets the mouse screen position X and ",
            "syntax": "GetMouseLocation()",
            "return": "On success returns 2 floats containing LocX, LocY. Returns '''false''' on error.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "GetMouseInputDelta": {
            "params": [],
            "description": "Retrieves how far the mouse moved this frame. ",
            "syntax": "GetMouseInputDelta()",
            "return": "Returns 2 float values, DeltaX and DeltaY",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "DeprojectMouseLocationToWorld": {
            "params": [],
            "description": "Deproject the mouse location to the game world coordinates.",
            "syntax": "DeprojectMouseLocationToWorld()",
            "return": "On success returns 6 floats. World location X, Y, Z and world direction DirX, DirY, DirZ. On error the function returns '''false'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Mouse "
        },
        "SetTime": {
            "params": [
                {
                    "name": "time",
                    "description": "Float value between 0.0 and 24.0"
                }
            ],
            "description": "Set the specified time for the client.",
            "syntax": "SetTime(time)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "GetTime": {
            "params": [],
            "description": "Get the client game time.",
            "syntax": "GetTime()",
            "return": "Returns the current game time as a floating point number.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "SetSkySaturation": {
            "params": [
                {
                    "name": "saturation",
                    "description": "The saturation value in float between 0.0 to 4.0. Default: 1.05"
                }
            ],
            "description": "Set the sky color saturation for the client.",
            "syntax": "SetSkySaturation(saturation)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "GetSkySaturation": {
            "params": [],
            "description": "Get the sky color saturation for the client.",
            "syntax": "GetSkySaturation()",
            "return": "Returns the sky saturation that was set with [[SetSkySaturation]].",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "SetCloudSpeed": {
            "params": [
                {
                    "name": "speed",
                    "description": "The cloud movement speed between 0.0 and 1000.0. Default: 0.1"
                }
            ],
            "description": "Set the cloud movement speed or the client.",
            "syntax": "SetCloudSpeed(speed)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "GetCloudSpeed": {
            "params": [],
            "description": "Get the cloud movement speed for the client.",
            "syntax": "GetCloudSpeed()",
            "return": "Returns the cloud movement speed that was set with [[SetCloudSpeed]].",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "SetCloudDensity": {
            "params": [
                {
                    "name": "density",
                    "description": "Density value between 0.0 and 4.0, default: 1.15"
                }
            ],
            "description": "Sets the cloud density for this client.",
            "syntax": "SetCloudDensity(density)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "GetCloudDensity": {
            "params": [],
            "description": "Get the sky cloud density for the client.",
            "syntax": "GetCloudDensity()",
            "return": "Returns the cloud density that was set with [[SetCloudDensity]].",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "SetSunRadius": {
            "params": [
                {
                    "name": "radius",
                    "description": "A float value between 0.0 and 10.0, default: 0.5357"
                }
            ],
            "description": "Set the specified radius of the sun for the client.",
            "syntax": "SetSunRadius(radius)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "GetSunRadius": {
            "params": [],
            "description": "Get the sun radius for the client.",
            "syntax": "GetSunRadius()",
            "return": "Returns the sun radius that was set with [[SetSunRadius]].",
            "info": {
                "context": "Client",
                "introduced": "1.2.1"
            },
            "category": " Sky / Environment "
        },
        "SetMoonRadius": {
            "params": [
                {
                    "name": "radius",
                    "description": "The radius between 0.0 and 10.0, default: 1.0"
                }
            ],
            "description": "Set the moon radius in float value.",
            "syntax": "SetMoonRadius(radius)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "GetMoonRadius": {
            "params": [],
            "description": "Get the moon radius as a float value.",
            "syntax": "GetMoonRadius()",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sky / Environment "
        },
        "SetHeightFogDensity": {
            "params": [
                {
                    "name": "density",
                    "description": "The fog density multiplier, default: 1.0"
                }
            ],
            "description": "Set global fog density multiplier.",
            "syntax": "SetHeightFogDensity(density)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.4.3"
            },
            "category": " Sky / Environment "
        },
        "GetHeightFogDensity": {
            "params": [],
            "description": "Get the global fog density multiplier.",
            "syntax": "GetHeightFogDensity()",
            "return": "Returns the fog density, default: 1.0.",
            "info": {
                "context": "Client",
                "introduced": "1.4.3"
            },
            "category": " Sky / Environment "
        },
        "GetPing": {
            "params": [],
            "description": "Gets the client ping.",
            "syntax": "GetPing()",
            "return": "The clients ping.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Network "
        },
        "GetNetworkStats": {
            "params": [],
            "description": "Gets the clients' NetworkStats",
            "syntax": "GetNetworkStats()",
            "return": "packetlossTotal, packetlossLastSecond, messagesInResendBuffer, bytesInResendBuffer, bytesSend, bytesReceived, bytesResent, bytesSendTotal, bytesReceivedTotal, bytesResentTotal, isLimitedByCongestionControl, isLimitedByOutgoingBandwidthLimit",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Network "
        },
        "GetServerIP": {
            "params": [],
            "description": "Gets the current server IP address.",
            "syntax": "GetServerIP()",
            "return": "The IP address as a string, useful for [[ConnectToServer]].",
            "info": {
                "context": "Client",
                "introduced": "1.3.0"
            },
            "category": " Network "
        },
        "GetServerPort": {
            "params": [],
            "description": "Gets the current server port.",
            "syntax": "GetServerPort()",
            "return": "The port as an integer, useful for [[ConnectToServer]].",
            "info": {
                "context": "Client",
                "introduced": "1.3.0"
            },
            "category": " Network "
        },
        "IsValidNPC": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Check if specified NPC is valid or not.",
            "syntax": "IsValidNPC(npc)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetNPCActor": {
            "params": [
                {
                    "name": "npcid",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the NPC.",
            "syntax": "GetNPCActor(npcid)",
            "return": "Returns Unreal Actor Id on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "SetNPCPropertyValue": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetNPCPropertyValue(npc, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetNPCPropertyValue": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetNPCPropertyValue(npc, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetNPCBoneNames": {
            "params": [],
            "description": "Returns a table containing the bone names of the NPC skeleton dynamically. Useful for [[GetNPCBoneLocation]].",
            "syntax": "GetNPCBoneLocation()",
            "return": "Returns a table with the bone names.",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": " NPC "
        },
        "GetNPCBoneLocation": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier"
                },
                {
                    "name": "BoneName ",
                    "description": "The bone name"
                }
            ],
            "description": "This function returns the bone location of the NPC.",
            "syntax": "GetNPCBoneLocation(npc, BoneName [, BoneSpace])",
            "return": "Returns X, Y, Z of the bone location.",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": " NPC "
        },
        "GetNPCCount": {
            "params": [],
            "description": "Get the number of spawned NPCs.",
            "syntax": "GetNPCCount()",
            "return": "Returns the NPC count.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetStreamedNPC": {
            "params": [],
            "description": "Get the streamed NPC identifiers in a table.",
            "syntax": "GetStreamedNPC()",
            "return": "Returns a table with the streamed in NPC identifiers as values.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetNPCLocation": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Get the NPC's location vectors.",
            "syntax": "GetNPCLocation(npc)",
            "return": "Returns the XYZ vectors of the NPC's location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetNPCSkeletalMeshComponent": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier."
                },
                {
                    "name": "ComponentName",
                    "description": "Name of which SK component to get. Can be '''Body''', '''Clothing0''', '''Clothing1''', '''Clothing2''', '''Clothing3''', '''Clothing4''', '''Clothing5'''"
                }
            ],
            "description": "Gets the skeletal mesh component of an NPC.",
            "syntax": "GetNPCSkeletalMeshComponent(npc, ComponentName)",
            "return": "Returns the skeletal mesh component. [[UnrealLua]]",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "SetNPCOutline": {
            "params": [
                {
                    "name": "npc ",
                    "description": "The NPC indentifier."
                }
            ],
            "description": "Sets the outline on the specified NPC.",
            "syntax": "SetNPCOutline(npc [, bEnable])",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " NPC "
        },
        "GetObjectActor": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the Object.",
            "syntax": "GetObjectActor(object)",
            "return": "Returns Unreal Actor Id on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectPropertyValue": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetObjectPropertyValue(object, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectPropertyValue": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetObjectPropertyValue(object, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectCount": {
            "params": [],
            "description": "Get the number of spawned object instances from [[CreateObject]].",
            "syntax": "GetObjectCount()",
            "return": "Returns total object count.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectModelCount": {
            "params": [],
            "description": "Get the amount of object models. This is basically the total number of objects from this page [[Objects]]. ",
            "syntax": "GetObjectModelCount()",
            "return": "Returns model count as an integer.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectModelGroup": {
            "params": [
                {
                    "name": "model",
                    "description": "The model identifier from [[Objects]]."
                }
            ],
            "description": "Returns the group name of an object model.",
            "syntax": "GetObjectModelGroup(model)",
            "return": "Returns the objects model category as string.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectModelName": {
            "params": [
                {
                    "name": "model",
                    "description": "The model identifier from [[Objects]]."
                }
            ],
            "description": "Returns the asset name of an object model.",
            "syntax": "GetObjectModelName(model)",
            "return": "Returns the objects model asset name as string.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetStreamedObjects": {
            "params": [],
            "description": "Gets the streamed in objects for the local player.",
            "syntax": "GetStreamedObjects( [, bGetAttached])",
            "return": "Returns a table with streamed in object identifiers as values.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectModel": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Get the object model number ob a spawned object. See [[Objects]].",
            "syntax": "GetObjectModel(object)",
            "return": "Returns the object model number as an integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectLocation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Returns the object's XYZ location.",
            "syntax": "GetObjectLocation(object)",
            "return": "The XYZ vector of the object.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectRotation": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the object rotation.",
            "syntax": "GetObjectRotation(object)",
            "return": "Returns 3 float values: pitch, yaw and roll",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectScale": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the object scale.",
            "syntax": "GetObjectScale(object)",
            "return": "Returns 3 float values: X, Y and Z scale",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectBoundingBox": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the local bounds of the object.",
            "syntax": "GetObjectBoundingBox(object)",
            "return": "Returns 6 floats: MinX, MinY, MinZ, MaxX, MaxY, Ma",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectSize": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Returns size of the bounding box. (Maximum point - minimum point)",
            "syntax": "GetObjectSize(object)",
            "return": "Returns 3 floats containing the size of this objects model in all 3 dimensions.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "EnableObjectHitEvents": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Enables the [[OnObjectHit]] event.",
            "syntax": "EnableObjectHitEvents(object [, bEnable])",
            "return": "Returns '''true'''",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectMass": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the mass of this object. This is an automatically calculated approximation.",
            "syntax": "GetObjectMass(object)",
            "return": "Returns the mass as a float (kg)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "GetObjectStaticMeshComponent": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Gets the static mesh component of an object.",
            "syntax": "GetObjectStaticMeshComponent(object)",
            "return": "Returns UStaticMeshComponent and then can be used by [[UnrealLua]].",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectEditorSpeed": {
            "params": [
                {
                    "name": "speed",
                    "description": "The speed in UE4 units."
                }
            ],
            "description": "Set the object gizmo editor's speed.",
            "syntax": "SetObjectEditorSpeed(speed)",
            "return": "This function returns '''nil'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectEditable": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "EditMode",
                    "description": "One of the [[EditModes]]."
                }
            ],
            "description": "Enables a gizmo on an object. A gizmo can be used to move, rotate and scale the object with the mouse.",
            "syntax": "SetObjectEditable(object, EditMode)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectOutline": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                }
            ],
            "description": "Set an object's outline.",
            "syntax": "SetObjectOutline(object [, bEnable])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectCastShadow": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "bEnable",
                    "description": "'''true''' to enable shadows, '''false''' to disable."
                }
            ],
            "description": "Toggles shadow casting for an object.",
            "syntax": "SetObjectCastShadow(object, bEnable)",
            "return": "Returns '''true'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectColor": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "IntColor",
                    "description": "Color as an integer from [[RGBA]]."
                }
            ],
            "description": "This creates a new material with a simple color and assigns it to a material slot.",
            "syntax": "SetObjectColor(object, IntColor [, MaterialSlot])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectEmissiveColor": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "ColorHex",
                    "description": "Hexadecimal color value"
                },
                {
                    "name": "EmissiveStrength",
                    "description": "The strength/brightness of the glow"
                }
            ],
            "description": "Makes an object glow with a specified hexadecimal value, intensity and material slot on the object",
            "syntax": "SetObjectEmissiveColor(object, ColorHex, EmissiveStrength [, MaterialSlot])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectTexture": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "TextureFile",
                    "description": "The texture file in your package folder."
                }
            ],
            "description": "Sets a texture on an object. For animated ones check [[SetObjectAnimatedTexture]].",
            "syntax": "SetObjectTexture(object, TextureFile [, MaterialSlot])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "SetObjectAnimatedTexture": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "TextureFile",
                    "description": "The files in your package directory."
                },
                {
                    "name": "Rows",
                    "description": "Number of rows of your flipbook texture."
                },
                {
                    "name": "Columns",
                    "description": "Number of columns of your flipbook texture."
                }
            ],
            "description": "Sets a flipbook texture on an object.",
            "syntax": "SetObjectAnimatedTexture(object, TextureFile, Rows, Columns [, MaterialSlot])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Objects "
        },
        "AddEvent": {
            "params": [
                {
                    "name": "EventName",
                    "description": "The name of the event. See [[Template:ServerEven"
                },
                {
                    "name": "LuaFunction ",
                    "description": "The function which will be called when the event occurs."
                }
            ],
            "description": "Adds a function as event handler which will be called when a certain event occurs. Multiple functions can be bound to a single even",
            "syntax": "AddEvent(EventName, LuaFunction)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Events "
        },
        "CallEvent": {
            "params": [
                {
                    "name": "EventName",
                    "description": "The event name."
                }
            ],
            "description": "The event to call by name. Will call events in all packages.",
            "syntax": "CallEvent(EventName [, UserArgs...])",
            "return": "This function has no specific return value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Events "
        },
        "AddRemoteEvent": {
            "params": [
                {
                    "name": "RemoteEventName",
                    "description": "The remote event name."
                },
                {
                    "name": "LuaFunction",
                    "description": "The lua function you want to call. Values you return from this function won't be transmitted to the originating CallRemoteEvent."
                }
            ],
            "description": "Register a remote event that can then be called from server to client or vice versa using [[CallRemoteEvent]]",
            "syntax": "AddRemoteEvent(RemoteEventName, LuaFunction)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Events "
        },
        "CallRemoteEvent": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier to call a remote event."
                },
                {
                    "name": "EventName",
                    "description": "The name of the remote event as a string which was explicit defined by [[AddRemoteEvent]]."
                }
            ],
            "description": "Calls a remote event on the remote machine. The server can call remote events for any connected player. Players (clients) can only call remote events on the server. Events are guaranteed to execute in the order sent. Keep in mind that it takes time to reach the remote machine as it's send over the network.<br>Remote events are independent of packages meaning you can call remote events across different packages.",
            "syntax": "CallRemoteEvent(player, EventName [, LuaArgs...])",
            "return": "Returns '''true''' on success or '''false''' on an error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Events "
        },
        "GetPickupActor": {
            "params": [
                {
                    "name": "pickupid",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the Pickup.",
            "syntax": "GetPickupActor(pickupid)",
            "return": "Returns Unreal Actor Id on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "GetPickupStaticMeshComponent": {
            "params": [
                {
                    "name": "pickupId",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Gets the static mesh component of a pickup.",
            "syntax": "GetPickupStaticMeshComponent(pickupId)",
            "return": "Returns the static mesh component and then can be used by [[UnrealLua]].",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "SetPickupPropertyValue": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetPickupPropertyValue(pickup, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "GetPickupPropertyValue": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetPickupPropertyValue(pickup, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "GetPickupCount": {
            "params": [],
            "description": "Gets the created pickup count.",
            "syntax": "GetPickupCount()",
            "return": "Returns number of created pickups.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "GetStreamedPickups": {
            "params": [],
            "description": "Get all the streamed pickups for the client.",
            "syntax": "GetStreamedPickups()",
            "return": "Returns a table with all the pickups streamed to the client.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "GetPickupLocation": {
            "params": [
                {
                    "name": "pickupid",
                    "description": "The pickup identifier."
                }
            ],
            "description": "Get the specified pickup's XYZ vectors (location).",
            "syntax": "GetPickupLocation(pickupid)",
            "return": "This function returns the XYZ vectors for the specified vectors.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Pickup "
        },
        "SetDoorPropertyValue": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetDoorPropertyValue(door, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.1.0"
            },
            "category": " Door "
        },
        "GetDoorPropertyValue": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "GetDoorPropertyValue(door, PropertyName)",
            "return": "Returns '''propertyName''''s  value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.1.0"
            },
            "category": " Door "
        },
        "IsDoorInteractable": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                }
            ],
            "description": "Checks if the door is interactable.",
            "syntax": "IsDoorInteractable(door)",
            "return": "Returns '''true''' if the door is interactable, '''false''' if not.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.5.0"
            },
            "category": " Door "
        },
        "IsDoorOpen": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                }
            ],
            "description": "Checks the door state.",
            "syntax": "IsDoorOpen(door)",
            "return": "Returns '''true''' if the door is open, '''false''' if closed.",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "GetDoorActor": {
            "params": [
                {
                    "name": "doorid",
                    "description": "The door identifier."
                }
            ],
            "description": "Get the Unreal Engine actor for the Door.",
            "syntax": "GetDoorActor(doorid)",
            "return": "Returns Unreal Actor Id on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "IsValidDoor": {
            "params": [
                {
                    "name": "door",
                    "description": "The dooridentifier to check."
                }
            ],
            "description": "Checks whether a given door identifier is a valid door.",
            "syntax": "IsValidDoor(door)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "GetDoorCount": {
            "params": [],
            "description": "Returns the number of doors.",
            "syntax": "GetDoorCount()",
            "return": "Returns the number of doors.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "GetNearestDoor": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Gets the nearest door from the specified XYZ vector created earlier with [[CreateDoor]].",
            "syntax": "GetNearestDoor(x, y, z)",
            "return": "the door identifier on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "GetDoorLocation": {
            "params": [
                {
                    "name": "door",
                    "description": "The door specifier"
                }
            ],
            "description": "Gets the XYZA vector of the specified door created earlier with [[CreateDoor]].",
            "syntax": "GetDoorLocation(door)",
            "return": "the x, y, z and yaw vectors of the door location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "GetStreamedDoors": {
            "params": [],
            "description": "Get the streamed in doors IDs in a table.",
            "syntax": "GetStreamedDoors()",
            "return": "This function returns a table.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Door "
        },
        "SetText3DPropertyValue": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetText3DPropertyValue(text3d, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Text "
        },
        "GetText3DPropertyValue": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetText3DPropertyValue(text3d, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Text "
        },
        "GetText3DCount": {
            "params": [],
            "description": "Returns the number of text 3D created.",
            "syntax": "GetText3DCount()",
            "return": "The number of text 3D created.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Text "
        },
        "IsValidText3D": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3d identifier."
                }
            ],
            "description": "Check if the text 3d is valid or not.",
            "syntax": "IsValidText3D(text3d)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Text3D"
        },
        "GetText3DText": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3D identifier"
                }
            ],
            "description": "Gets a text3d text string.",
            "syntax": "GetText3DText(text3d)",
            "return": "Returns the text as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.5.2"
            },
            "category": "Text3D"
        },
        "GetSoundCount": {
            "params": [],
            "description": "Get the amount of sounds created with [[CreateSound]].",
            "syntax": "GetSoundCount()",
            "return": "Returns the amount of sounds created for the client.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "IsValidSound": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier"
                }
            ],
            "description": "Checks whether the sound is valid or not.",
            "syntax": "IsValidSound(sound)",
            "return": "Returns '''true''' if the sound is valid, otherwise '''false'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "CreateSound": {
            "params": [
                {
                    "name": "SoundFile",
                    "description": "The path to the file to play. Or a HTTP network stream or file."
                }
            ],
            "description": "Plays a local audio file or over http. Also supports playing .pls network stream",
            "syntax": "CreateSound(SoundFile [, bLooping])",
            "return": "Returns the sound identifier. Returns '''false''' on error. Once the playback has finished the sound identifier will be destroyed automatically.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "CreateSound3D": {
            "params": [
                {
                    "name": "SoundFile",
                    "description": "The path to the file to play. Or a HTTP network stream or file."
                },
                {
                    "name": "x",
                    "description": "Location X coordinate"
                },
                {
                    "name": "y",
                    "description": "Location Y coordinate"
                },
                {
                    "name": "z",
                    "description": "Location Z coordinate"
                },
                {
                    "name": "radius",
                    "description": "The radius to where the sound will be heard from."
                }
            ],
            "description": "Plays a local audio file or over http. Also supports playing .pls network streams. Sound is played in 3D world spac",
            "syntax": "CreateSound3D(SoundFile, x, y, z, radius [, bLooping])",
            "return": "Returns the sound identifier. Returns '''false''' on error. Once the playback has finished the sound identifier will be destroyed automatically.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "SetSound3DLocation": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                }
            ],
            "description": "Sets the location of a 3d sound.",
            "syntax": "SetSound3DLocation(sound, x, y, z)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "GetSound3DLocation": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                }
            ],
            "description": "Gets the location of a 3d sound.",
            "syntax": "GetSound3DLocation(sound)",
            "return": "Returns 3 float values: X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "DestroySound": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                }
            ],
            "description": "Destroy the sound created with [[CreateSound]].",
            "syntax": "DestroySound(sound)",
            "return": "This function returs nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "GetAllSounds": {
            "params": [],
            "description": "Gets all the sound IDs in a table.",
            "syntax": "GetAllSounds()",
            "return": "This function returns a table.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "SetSoundVolume": {
            "params": [
                {
                    "name": "sound",
                    "description": "The location of the audio file that you want to stream or the .pls audio stream link."
                },
                {
                    "name": "volume",
                    "description": "A float modifier between 0 to 2, where 1 is 100% volume and 2 is the 200% volume."
                }
            ],
            "description": "Set the specified sound's volume.",
            "syntax": "SetSoundVolume(sound, volume)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "GetSoundVolume": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier returns from [[CreateSound]]."
                }
            ],
            "description": "Get the specified sound's volume.",
            "syntax": "GetSoundVolume(sound)",
            "return": "The volume in '''float''' type.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "SetSoundPitch": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                },
                {
                    "name": "Pitch",
                    "description": "The pitch in floating point. Between 0 and 10. "
                }
            ],
            "description": "Sets the sound pitch.",
            "syntax": "SetSoundPitch(sound, Pitch)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "GetSoundPitch": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                }
            ],
            "description": "Gets the sound pitch.",
            "syntax": "GetSoundPitch(sound)",
            "return": "Returns pitch in floating point on success, '''false''' on error.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "SetSoundFadeIn": {
            "params": [
                {
                    "name": "sound ",
                    "description": "The sound identifier."
                },
                {
                    "name": "Duration",
                    "description": "The duration of the fade in effect."
                },
                {
                    "name": "VolumeLevel",
                    "description": "The volume for the sound to fade to."
                }
            ],
            "description": "Set the sound to fade in.",
            "syntax": "SetSoundFadeIn(sound [, Duration, VolumeLevel, StartTime])",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "SetSoundFadeOut": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                },
                {
                    "name": "Duration",
                    "description": "The duration of the fade out effect."
                },
                {
                    "name": "VolumeLevel",
                    "description": "The volume for the sound to fade to."
                }
            ],
            "description": "Set the sound to fade out.",
            "syntax": "SetSoundFadeOut(sound, Duration, VolumeLevel)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Sound "
        },
        "GetStreamedText3D": {
            "params": [],
            "description": "Get the streamed text 3d identifiers in a table.",
            "syntax": "GetStreamedText3D()",
            "return": "Returns a table with streamed in text 3d identifiers.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Text "
        },
        "GetText3DLocation": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text 3d identifier."
                }
            ],
            "description": "Get the text 3d XYZ location.",
            "syntax": "GetText3DLocation(text3d)",
            "return": "Returns the XYZ vectors of the text 3d.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Text "
        },
        "Delay": {
            "params": [
                {
                    "name": "Milliseconds",
                    "description": "The interval in milliseconds."
                },
                {
                    "name": "LuaFunction",
                    "description": "The Lua function to delay."
                }
            ],
            "description": "Create a delayed function just like a timer but only once. ([[DelayFor]])",
            "syntax": "Delay(Milliseconds, LuaFunction [, UserArgs])",
            "return": "Returns the id of this delay, same as for timers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "GetTimerCount": {
            "params": [],
            "description": "Gets the created timers count.",
            "syntax": "GetTimerCount()",
            "return": "Returns number of created timers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "GetAllTimers": {
            "params": [],
            "description": "Get all timers on the server/ client.",
            "syntax": "GetAllTimers()",
            "return": "Returns a table of all timer identifiers.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "IsValidTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier."
                }
            ],
            "description": "Check if the timer identifier specified is valid or not.",
            "syntax": "IsValidTimer(timer)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "CreateTimer": {
            "params": [
                {
                    "name": "LuaFunction",
                    "description": "The function to execute."
                },
                {
                    "name": "Interval ",
                    "description": "Interval to execute the function."
                }
            ],
            "description": "Creates a timer to call a latent functio",
            "syntax": "CreateTimer(LuaFunction, Interval [, UserArgs])",
            "return": "Returns the identifier to this timer. Use [[DestroyTimer]] to stop it.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "CreateCountTimer": {
            "params": [
                {
                    "name": "LuaFunction",
                    "description": "The function to execute."
                },
                {
                    "name": "Interval",
                    "description": "Interval to execute the function."
                },
                {
                    "name": "Count",
                    "description": "How often to execute this timer. Use [[CreateTimer]] for a non-stop version."
                }
            ],
            "description": "Creates a countdown timer.",
            "syntax": "CreateCountTimer(LuaFunction, Interval, Count [, UserArgs])",
            "return": "Returns the identifier to this timer. Use [[DestroyTimer]] to stop it.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "DestroyTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier."
                }
            ],
            "description": "Destroys a timer created with [[CreateTimer]] or [[CreateCountTimer]].",
            "syntax": "DestroyTimer(timer)",
            "return": "Returns '''true''' if success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "PauseTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Pauses the specified timer.",
            "syntax": "PauseTimer(timer)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "UnpauseTimer": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Unpause an already paused timer with this function.",
            "syntax": "UnpauseTimer(timer)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "GetTimerRemainingTime": {
            "params": [
                {
                    "name": "timer",
                    "description": "The timer identifier"
                }
            ],
            "description": "Gets the specified timer's remaining time.",
            "syntax": "GetTimerRemainingTime(timer)",
            "return": "The '''float''' value of timer interval left.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Timer "
        },
        "SetVehiclePropertyValue": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                },
                {
                    "name": "Value",
                    "description": "Value can be a boolean, integer, float, string or table"
                }
            ],
            "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.",
            "syntax": "SetVehiclePropertyValue(vehicle, PropertyName, Value, bSync)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehiclePropertyValue": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "PropertyName",
                    "description": "Name of the property variable"
                }
            ],
            "description": "Gets a property value for this entity.",
            "syntax": "GetVehiclePropertyValue(vehicle, PropertyName)",
            "return": "Returns the value.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleCount": {
            "params": [],
            "description": "Returns the number of vehicles.",
            "syntax": "GetVehicleCount()",
            "return": "Returns the number of vehicles.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleLicensePlate": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the vehicle license plate text.",
            "syntax": "GetVehicleLicensePlate(vehicle)",
            "return": "Returns the license plate text as a string.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsValidVehicle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier to check."
                }
            ],
            "description": "Checks whether a given vehicle identifier is a valid vehicle.",
            "syntax": "IsValidVehicle(vehicle)",
            "return": "Returns '''true''' on success, '''false''' on error.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetStreamedVehicles": {
            "params": [],
            "description": "Get the streamed-in vehicles identifiers in a table.",
            "syntax": "GetStreamedVehicles()",
            "return": "Returns the streamed-in vehicle identifiers in a table.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleBoneLocation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "BoneName",
                    "description": "The bone name as string. [[VehicleBones]]"
                }
            ],
            "description": "Returns the location of a vehicle bone/socket. For a list of bones see [[VehicleBones]].",
            "syntax": "GetVehicleBoneLocation(vehicle, BoneName [, BoneSpace])",
            "return": "Returns the location X, Y, Z.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleBoneNames": {
            "params": [],
            "description": "Gets a list of the vehicles bone names.",
            "syntax": "GetVehicleBoneNames()",
            "return": "Table containing all vehicles bone names.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleModel": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Get the vehicle model id.",
            "syntax": "GetVehicleModel(vehicle)",
            "return": "Returns the vehicle model.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleLocation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's location.",
            "syntax": "GetVehicleLocation(vehicle)",
            "return": "Returns the XYZ vectors of the vehicle location.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleRotation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the vehicle rotation (pitch, yaw and roll) of the specified vehicle.",
            "syntax": "GetVehicleRotation(vehicle)",
            "return": "The rotation pitch, yaw and roll of the vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleVelocity": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the vehicle's velocity vectors.",
            "syntax": "GetVehicleVelocity(vehicle)",
            "return": "This function returns the velocity of your vehicle.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleForwardVector": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the normalized forward vector.",
            "syntax": "GetVehicleForwardVector(vehicle)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleRightVector": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the normalized right vector.",
            "syntax": "GetVehicleRightVector(vehicle)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleUpVector": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the normalized up vector.",
            "syntax": "GetVehicleUpVector(vehicle)",
            "return": "Returns 3 float values, X, Y and Z",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleBoundingBox": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the local bounds of the vehicle.",
            "syntax": "GetVehicleBoundingBox(vehicle)",
            "return": "Returns 6 floats: MinX, MinY, MinZ, MaxX, MaxY, MaxZ",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleEngineRPM": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's engine revolution per minute (RPM).",
            "syntax": "GetVehicleEngineRPM(vehicle)",
            "return": "Returns a floating point value.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleForwardSpeed": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the vehicle's forward moving speed. Negative when the vehicle is moving backwards.",
            "syntax": "GetVehicleForwardSpeed(vehicle)",
            "return": "Returns '''positive''' value if the vehicle is moving forward, otherwise '''negative'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleGear": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's gear.",
            "syntax": "GetVehicleGear(vehicle)",
            "return": "Vehicle gear as integer.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleWheelSurface": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "Vehicle identifier."
                },
                {
                    "name": "wheel",
                    "description": "Wheel index: 0-3"
                }
            ],
            "description": "Get the wheel surface name.",
            "syntax": "GetVehicleWheelSurface(vehicle, wheel)",
            "return": "Returns the name of the surface as a string.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsVehicleWheelInAir": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "wheel",
                    "description": "The wheel id (starting from 1)"
                }
            ],
            "description": "Check if the specified vehicle wheel is in air or not.",
            "syntax": "IsVehicleWheelInAir(vehicle, wheel)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsVehicleInAir": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Check if vehicle is in air.",
            "syntax": "IsVehicleInAir(vehicle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleWheelSteerAngle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "wheel",
                    "description": "Vehicle wheel starting at 0"
                }
            ],
            "description": "Returns the steering angle from 0.0 to ~45.0 (depending on vehicle)",
            "syntax": "GetVehicleWheelSteerAngle(vehicle, wheel)",
            "return": "Returns the steering angle of the wheel.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsVehicleHornActive": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Check if the vehicle horn is active or not.",
            "syntax": "IsVehicleHornActive(vehicle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleEngineState": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's engine state.",
            "syntax": "GetVehicleEngineState(vehicle)",
            "return": "Returns '''true''' if on.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleLightState": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's light state.",
            "syntax": "GetVehicleLightState(vehicle)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleHoodRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's hood ratio.",
            "syntax": "GetVehicleHoodRatio(vehicle)",
            "return": "Returns the ratio of the vehicle hood.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleTrunkRatio": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Get the vehicle's trunk ratio.",
            "syntax": "GetVehicleTrunkRatio(vehicle)",
            "return": "The floating point value of the trunk ratio.",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsVehicleInWater": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Check if the vehicle is in water.",
            "syntax": "IsVehicleInWater(vehicle)",
            "return": "Returns '''true''' if vehicle is in water, otherwise '''false'''",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "IsVehicleSeatOccupied": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "seat",
                    "description": "The seat identifier."
                }
            ],
            "description": "Check if the specified seat of the vehicle is occupied or not.",
            "syntax": "IsVehicleSeatOccupied(vehicle, seat)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleDoorLocation": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                },
                {
                    "name": "door",
                    "description": "The vehicle door (1 is driver (top-left), 2 is top-right, 3 is bottom-left, and 4 is bottom-right."
                }
            ],
            "description": "Get the specified door enter location of the vehicle. This is where the player has to stand in order to enter the vehicle.",
            "syntax": "GetVehicleDoorLocation(vehicle, door)",
            "return": "This function returns the XYZ coordinates.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleHealth": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier"
                }
            ],
            "description": "Returns the specified vehicle health in float.",
            "syntax": "GetVehicleHealth(vehicle)",
            "return": "Vehicle health in float value between 0 to 10000",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetVehicleSkeletalMeshComponent": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Gets the skeletal mesh component of a vehicle.",
            "syntax": "GetVehicleSkeletalMeshComponent(vehicle)",
            "return": "Returns USkeletalMeshComponent and then can be used by [[UnrealLua]].",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Vehicles "
        },
        "GetWebUICount": {
            "params": [],
            "description": "Gets the total number of Web UIs created.",
            "syntax": "GetWebUICount()",
            "return": "Returns the number of web UIs created.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "CreateWebUI": {
            "params": [
                {
                    "name": "x",
                    "description": "screen pixel x"
                },
                {
                    "name": "y",
                    "description": "screen pixel y"
                },
                {
                    "name": "width",
                    "description": "pixel width"
                },
                {
                    "name": "height ",
                    "description": "pixel height"
                }
            ],
            "description": "Creates a new WebUI",
            "syntax": "CreateWebUI(x, y, width, height [, zOrder, frameRate])",
            "return": "web (number)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "CreateWebUI3D": {
            "params": [
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y",
                    "description": "The Y axis"
                },
                {
                    "name": "z",
                    "description": "The Z axis"
                },
                {
                    "name": "rx",
                    "description": "The RX axis"
                },
                {
                    "name": "ry",
                    "description": "The RY axis"
                },
                {
                    "name": "rz",
                    "description": "The RZ axis"
                },
                {
                    "name": "width",
                    "description": "The width"
                },
                {
                    "name": "height ",
                    "description": "The height"
                }
            ],
            "description": "Creates a new WebUI in 3d space. Use [[DestroyWebUI]] to destroy it.",
            "syntax": "CreateWebUI3D(x, y, z, rx, ry, rz, width, height [, frameRate, AudioFalloffDistance])",
            "return": "web (number)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "CreateRemoteWebUI": {
            "params": [],
            "description": "Creates a new remote WebUI, which allows opening whitelisted websites.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "CreateRemoteWebUI3D": {
            "params": [],
            "description": "Creates a new remote 3D WebUI, which allows opening whitelisted websites.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "DestroyWebUI": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier."
                }
            ],
            "description": "Destroy a web UI made with [[CreateWebUI]].",
            "syntax": "DestroyWebUI(web)",
            "return": "This function returs nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "GetAllWebUI": {
            "params": [],
            "description": "Get all web UI created for the client. Useful for loops.",
            "syntax": "GetAllWebUI()",
            "return": "Returns a table of all web UIs created for the player.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebVisibility": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "visibility",
                    "description": "The [[WebVisibility]] enum"
                }
            ],
            "description": "Used to set the web UI visibility mode.",
            "syntax": "SetWebVisibility(web, visibility)",
            "return": "None",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "GetWebVisibility": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                }
            ],
            "description": "Get the specified web's visibility mode.",
            "syntax": "GetWebVisibility(web)",
            "return": "Returns the '''[[WebVisibility]]'''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebURL": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "URL",
                    "description": "The URL"
                }
            ],
            "description": "Set the web URL. Not all URLs are whitelisted and might not work.",
            "syntax": "SetWebURL(web, URL)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "ExecuteWebJS": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier."
                },
                {
                    "name": "Javascript",
                    "description": "The Javascript source."
                }
            ],
            "description": "Executes Javascript in the WebUI. (Make sure to first call this after all your js is loaded by sending an event from js",
            "syntax": "ExecuteWebJS(web, Javascript)",
            "return": "This function returns '''true''' if the web identifier is found. It does not return the return values from JS as this whole process is asynchronous.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebLocation": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "x",
                    "description": "The X axis"
                },
                {
                    "name": "y ",
                    "description": "The Y axis"
                }
            ],
            "description": "Set the location for the specified web.",
            "syntax": "SetWebLocation(web, x, y [, z])",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebRotation": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "rx",
                    "description": "The rotation RX"
                },
                {
                    "name": "ry",
                    "description": "The rotation RY"
                },
                {
                    "name": "rz",
                    "description": "The rotation RZ"
                }
            ],
            "description": "Set the rotation for the specified web.",
            "syntax": "SetWebRotation(web, rx, ry, rz)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebSize": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "width",
                    "description": "The width"
                },
                {
                    "name": "height",
                    "description": "The height"
                }
            ],
            "description": "Set the web UI size.",
            "syntax": "SetWebSize(web, width, height)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebAlignment": {
            "params": [
                {
                    "name": "web",
                    "description": "The web UI identifier."
                },
                {
                    "name": "x",
                    "description": "The screen X axis"
                },
                {
                    "name": "y",
                    "description": "The screen Y axis"
                }
            ],
            "description": "Set the web alignment.",
            "syntax": "SetWebAlignment(web, x, y)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebAnchors": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                },
                {
                    "name": "MinX",
                    "description": "The minimum X axis (between 0.0 to 1.0)"
                },
                {
                    "name": "MinY",
                    "description": "The minimum Y axis (between 0.0 to 1.0)"
                },
                {
                    "name": "MaxX",
                    "description": "The maximum X axis (between 0.0 to 1.0)"
                },
                {
                    "name": "MaxY",
                    "description": "The maximum Y axis (between 0.0 to 1.0)"
                }
            ],
            "description": "Set the anchor points for the Web UI.",
            "syntax": "SetWebAnchors(web, MinX, MinY, MaxX, MaxY)",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Web UI "
        },
        "SetWebFocus": {
            "params": [
                {
                    "name": "web",
                    "description": "The web identifier"
                }
            ],
            "description": "Sets (keyboard) focus to a WebUI. Useful for custom chat",
            "syntax": "SetWebFocus(web)",
            "return": "This function returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.4.3"
            },
            "category": " Web UI "
        },
        "SetInputMode": {
            "params": [
                {
                    "name": "InputMode",
                    "description": "[[InputModes]]"
                }
            ],
            "description": "Set the client's input mode for the game.",
            "syntax": "SetInputMode(InputMode)",
            "return": "This function returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "GetInputMode": {
            "params": [],
            "description": "Gets the [[InputMod",
            "syntax": "GetInputMode()",
            "return": "Returns [[InputModes]]",
            "info": {
                "context": "Client",
                "introduced": "1.3.0"
            },
            "category": " Key "
        },
        "IsInputKeyDown": {
            "params": [
                {
                    "name": "key",
                    "description": "The key to check."
                }
            ],
            "description": "Check if a key is currently pressed.",
            "syntax": "IsInputKeyDown(key)",
            "return": "Returns '''true''' if it is pressed, '''false''' otherwise",
            "info": {
                "context": "Client",
                "introduced": "1.4.2"
            },
            "category": " Key "
        },
        "IsCtrlPressed": {
            "params": [],
            "description": "Check if the player has pressed the Ctrl key.",
            "syntax": "IsCtrlPressed()",
            "return": "Returns '''true''' on success.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "IsShiftPressed": {
            "params": [],
            "description": "Check if the client has pressed the Shift key",
            "syntax": "IsShiftPressed()",
            "return": "Returns '''true''' if pressed, otherwise '''false'''",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "IsAltPressed": {
            "params": [],
            "description": "Check if the client has pressed the Alt key",
            "syntax": "IsAltPressed()",
            "return": "Returns '''true''' if pressed, otherwise '''false'''",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "IsCmdPressed": {
            "params": [],
            "description": "Check if the client has pressed the Ctrl key",
            "syntax": "IsCmdPressed()",
            "return": "Returns '''true''' if pressed, otherwise '''false'''",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "SetIgnoreMoveInput": {
            "params": [
                {
                    "name": "bIgnore",
                    "description": "The boolean ignore status"
                }
            ],
            "description": "This function ignores the player input, basically freezing.",
            "syntax": "SetIgnoreMoveInput(bIgnore)",
            "return": "Returns nothing.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "SetIgnoreLookInput": {
            "params": [
                {
                    "name": "bIgnore",
                    "description": "The boolean status."
                }
            ],
            "description": "This function toggles the player's mouse input that controls the camera.",
            "syntax": "SetIgnoreLookInput(bIgnore)",
            "return": "This function returns ''nothing''.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "SetControlRotation": {
            "params": [
                {
                    "name": "pitch",
                    "description": "The pitch"
                },
                {
                    "name": "yaw",
                    "description": "The yaw"
                },
                {
                    "name": "roll",
                    "description": "The roll"
                }
            ],
            "description": "Sets the client control rotation.",
            "syntax": "SetControlRotation(pitch, yaw, roll)",
            "return": "__EDIT_ME__",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        },
        "GetInputAxisValue": {
            "params": [
                {
                    "name": "AxisName",
                    "description": "Name of the input axis key."
                }
            ],
            "description": "Gets the value of input axis keys.",
            "syntax": "GetInputAxisValue(AxisName)",
            "return": "Returns the value of the input axis key between -1.0 and 1.0.",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": " Key "
        }
    },
    "server_events": {
        "OnPlayerServerAuth": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who was given authorization to connect."
                }
            ],
            "description": "Server has authorized a client and allocated a player identifier to them. The player is now downloading packages from the server. Called after [[OnClientConnectionRequest]] but before [[OnPlayerJoin]].",
            "syntax": "OnPlayerServerAuth(player)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSteamAuth": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who was verified."
                }
            ],
            "description": "Called when a player was authenticated by Steam. Once this event was called you can use [[GetPlayerSteamId]] to get the players SteamI",
            "syntax": "OnPlayerSteamAuth(player)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerDownloadFile": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier"
                },
                {
                    "name": "FileName",
                    "description": "The name of the file they just downloaded."
                },
                {
                    "name": "Checksum",
                    "description": "The checksum hash of the file"
                }
            ],
            "description": "Called when a client finished downloading a package file from the server.",
            "syntax": "OnPlayerDownloadFile(player, FileName, Checksum)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStreamIn": {
            "params": [
                {
                    "name": "player",
                    "description": "The player for the other player is streamed in."
                },
                {
                    "name": "otherplayer",
                    "description": "The player that streams in for player."
                }
            ],
            "description": "Called when another user is streamed in (rendered) for the player.",
            "syntax": "OnPlayerStreamIn(player, otherplayer)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStreamOut": {
            "params": [
                {
                    "name": "player",
                    "description": "The player for the other player is streamed out."
                },
                {
                    "name": "otherplayer",
                    "description": "The player that streams out for player."
                }
            ],
            "description": "Called when a player streams out of the streaming distance set by [[server_config]] for another player.",
            "syntax": "OnPlayerStreamOut(player, otherplayer)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerPickupHit": {
            "params": [],
            "description": "Event thats called when a player pickups a pickup.",
            "syntax": "OnPlayerPickupHit(player, Pickup)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerJoin": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who has joined."
                }
            ],
            "description": "Called when a player is fully connected to the server. The game has started on the client and the player is going to spawn after this event was execute",
            "syntax": "OnPlayerJoin(player)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerQuit": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who has quit."
                }
            ],
            "description": "Event called when a player leaves the server.",
            "syntax": "OnPlayerQuit(player)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSpawn": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player who has spawned."
                }
            ],
            "description": "Called when a player spawns. This usually happens after they died. Use [[SetPlayerRespawnTime]] to control how long it takes before they respawn.",
            "syntax": "OnPlayerSpawn(playerid)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerDeath": {
            "params": [
                {
                    "name": "player",
                    "description": "The player that has died."
                },
                {
                    "name": "instigator",
                    "description": "The player who is responsible for the death."
                }
            ],
            "description": "Calls when a player dies by any means possible. If the player wasn't killed by another player, instigator will be the same as the player.",
            "syntax": "OnPlayerDeath(player, instigator)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerWeaponShot": {
            "params": [
                {
                    "name": "player",
                    "description": "The player that has shot the weapon."
                },
                {
                    "name": "weapon",
                    "description": "Weapon model id."
                },
                {
                    "name": "hittype",
                    "description": "The [[HitTy"
                },
                {
                    "name": "hitid",
                    "description": "The identifier of the entity which was hit."
                },
                {
                    "name": "hitX",
                    "description": "The X coordinate of this hit."
                },
                {
                    "name": "hitY",
                    "description": "The Y coordinate of this hit."
                },
                {
                    "name": "hitZ",
                    "description": "The Z coordinate of this hit."
                },
                {
                    "name": "startX",
                    "description": "The X coordinate of where this shot started from."
                },
                {
                    "name": "startY",
                    "description": "The Y coordinate of where this shot started from."
                },
                {
                    "name": "startZ",
                    "description": "The Z coordinate of where this shot started from."
                },
                {
                    "name": "normalX",
                    "description": "Impact normal X of the hit."
                },
                {
                    "name": "normalY",
                    "description": "Impact normal Y of the hit."
                },
                {
                    "name": "normalZ",
                    "description": "Impact normal Z of the hit."
                },
                {
                    "name": "BoneName",
                    "description": "Bone name of this hit. (For players)"
                }
            ],
            "description": "Called when a player has shot their weapon and the hit was authorized by the server but not yet processed its impact. You can call return '''false''' in this event to prevent this hit from further processing. (Server only)",
            "syntax": "OnPlayerWeaponShot(player, weapon, hittype, hitid, hitX, hitY, hitZ, startX, startY, startZ, normalX, normalY, normalZ, BoneName)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerDamage": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who is being damaged."
                },
                {
                    "name": "damagetype",
                    "description": "[[DamageTy"
                },
                {
                    "name": "amount",
                    "description": "Amount of damage applied."
                }
            ],
            "description": "Event thats called when player receives damage.",
            "syntax": "OnPlayerDamage(player, damagetype, amount)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerChat": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who is texting in chat."
                },
                {
                    "name": "text",
                    "description": "Text committed by the player."
                }
            ],
            "description": "The event that gets called when you type a message in the chat.",
            "syntax": "OnPlayerChat(player, text)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerChatCommand": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who has executed the command."
                },
                {
                    "name": "command",
                    "description": "The command name without slashes. For example: help"
                },
                {
                    "name": "exists",
                    "description": "'''false''' if the command is not bound by [[AddCommand]]. '''true''' if there is such handler."
                }
            ],
            "description": "Called when a player executes a command in the chat. See [[AddCommand]] to handle specific commands. You can return '''false''' in this event to prevent the command from being passed to it's handler.",
            "syntax": "OnPlayerChatCommand(player, command, exists)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerInteractDoor": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "door",
                    "description": "The door identifier."
                },
                {
                    "name": "bWantsOpen",
                    "description": "'''true''' if the door is currently closed on the client and therefore wants it open and vice versa."
                }
            ],
            "description": "Called when a player interacts with a door through pressing 'E'.",
            "syntax": "OnPlayerInteractDoor(player, door, bWantsOpen)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerChangeDimension": {
            "params": [
                {
                    "name": "player",
                    "description": "The player which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when a player instance changes dimensions from [[SetPlayerDimension]].",
            "syntax": "OnPlayerChangeDimension(player, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnPlayerEnterVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player is entering a vehicle."
                },
                {
                    "name": "vehicle",
                    "description": "The vehicle in which he is getting in."
                },
                {
                    "name": "seat",
                    "description": "The seat of the vehicle."
                }
            ],
            "description": "This event is called when a player enters a vehicle.",
            "syntax": "OnPlayerEnterVehicle(player, vehicle, seat)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerLeaveVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who leaves the vehicle."
                },
                {
                    "name": "vehicle",
                    "description": "The vehicle he is getting out of."
                },
                {
                    "name": "seat",
                    "description": "Vehicle seat the player gets out of."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerLeaveVehicle(player, vehicle, seat)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStateChange": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who changes state."
                },
                {
                    "name": "newstate",
                    "description": "The new [[PlayerSta"
                },
                {
                    "name": "oldstate",
                    "description": "The old [[PlayerSta"
                }
            ],
            "description": "Called when the player state changes. [[PlayerState]]",
            "syntax": "OnPlayerStateChange(player, newstate, oldstate)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleRespawn": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "This event is called when a vehicle is respawned.",
            "syntax": "OnVehicleRespawn(vehicle)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleStreamIn": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle for the other player is streamed in."
                },
                {
                    "name": "player",
                    "description": "The player that streams in for vehicle."
                }
            ],
            "description": "Calls when a vehicle streams out of the streaming distance set in your [[server_config]] for a player.",
            "syntax": "OnVehicleStreamIn(vehicle, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleStreamOut": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle for the other player is streamed out."
                },
                {
                    "name": "player",
                    "description": "The player that streams out for vehicle."
                }
            ],
            "description": "Called when a vehicle is no longer streamed for a player. The stream distance is set through your [[server_config]].",
            "syntax": "OnVehicleStreamOut(vehicle, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleDamage": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "healthDamage",
                    "description": "The amount of health damage."
                }
            ],
            "description": "This event is called when a vehicles takes health damage or physical damage.",
            "syntax": "OnVehicleDamage(vehicle, healthDamage [, damageIndex, damageAmount])",
            "info": {
                "context": "Server",
                "introduced": "1.1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleChangeDimension": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when an vehicle instance changes dimensions from [[SetVehicleDimension]].",
            "syntax": "OnVehicleChangeDimension(vehicle, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnVehicleCreated": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle which was created."
                }
            ],
            "description": "Event called when an vehicle instance was created through [[CreateVehicle]].",
            "syntax": "OnVehicleCreated(vehicle)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnVehicleDestroyed": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle which was destroyed."
                }
            ],
            "description": "Event called when a vehicle instance was destroyed through [[DestroyVehicle]].",
            "syntax": "OnVehicleDestroyed(vehicle)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnGameTick": {
            "params": [
                {
                    "name": "DeltaSeconds",
                    "description": "Time in seconds that passed since the last tick."
                }
            ],
            "description": "Called on execution of the main thread. This is typically every frame (FPS) on clients. Tick rate on the server varies depending on the load. Use [[GetServerTickRate]] on the server to get that rate.",
            "syntax": "OnGameTick(DeltaSeconds)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnClientConnectionRequest": {
            "params": [
                {
                    "name": "ip",
                    "description": "IP address of the client connecting."
                },
                {
                    "name": "port",
                    "description": "Port of the client connecting. This is not the server port."
                }
            ],
            "description": "Early callback of when a client tries to connect to the server. Client is not fully authorized by the server in this state. You can return '''false''' in this event to disconnect the client immediately.",
            "syntax": "OnClientConnectionRequest(ip, port)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnConsoleInput": {
            "params": [
                {
                    "name": "input",
                    "description": "The text that was typed in the console."
                }
            ],
            "description": "Called when a new input in the console happene",
            "syntax": "OnConsoleInput(input)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.2.1"
            },
            "category": "Unknown"
        },
        "OnServerLoaded": {
            "params": [],
            "description": "Called when the server has fully started up.",
            "syntax": "OnServerLoaded()",
            "info": {
                "context": "Server",
                "introduced": "1.5.2"
            },
            "category": "Unknown"
        },
        "OnPackageStart": {
            "params": [],
            "description": "Package was started and its scripts loaded. Use this event to initialize your script. For instance connecting to a database.",
            "syntax": "OnPackageStart()",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPackageStop": {
            "params": [],
            "description": "Package is being stopped. Cleanup your allocated resources here. At this point all timers started by this package have been killed already. Also plugins were notified about the package unload.",
            "syntax": "OnPackageStop()",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnScriptError": {
            "params": [
                {
                    "name": "message",
                    "description": "The script error message."
                }
            ],
            "description": "Called when a script error occurs. On the client side, this is only called when the game was started with the '''-dev''' switch. Available on the sever side since version 1.0.3.",
            "syntax": "OnScriptError(message)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCReachTarget": {
            "params": [
                {
                    "name": "npcid",
                    "description": "The NPC identifier."
                }
            ],
            "description": "Event thats called when a NPC reaches the target. See the [[SetNPCTargetLocation]] function.",
            "syntax": "OnNPCReachTarget(npcid)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCDamage": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC who is being damaged."
                },
                {
                    "name": "damagetype",
                    "description": "[[DamageTy"
                },
                {
                    "name": "amount",
                    "description": "Amount of damage applied."
                }
            ],
            "description": "Event thats called when a NPC is damaged.",
            "syntax": "OnNPCDamage(npc, damagetype, amount)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCSpawn": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier"
                }
            ],
            "description": "Event thats called when a NPC is spawned after it died. Death time can be set with [[SetNPCRespawnTime]].",
            "syntax": "OnNPCSpawn(npc)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCDeath": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc that died."
                },
                {
                    "name": "player",
                    "description": "Instigator, 0 if not killed by a player."
                }
            ],
            "description": "Event thats called when a NPC dies.",
            "syntax": "OnNPCDeath(npc, player)",
            "info": {
                "context": "Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCStreamIn": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier for the other player is streamed in."
                },
                {
                    "name": "player",
                    "description": "The player that streams in for npc."
                }
            ],
            "description": "The event thats called when a NPC is streamed for a player.",
            "syntax": "OnNPCStreamIn(npc, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCStreamOut": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC for the other player is streamed out."
                },
                {
                    "name": "player",
                    "description": "The player that streams out for npc."
                }
            ],
            "description": "Called when a NPC is streamed out from the server. ",
            "syntax": "OnNPCStreamOut(npc, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCChangeDimension": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when an NPC instance changes dimensions from [[SetNPCDimension]].",
            "syntax": "OnNPCChangeDimension(npc, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnNPCCreated": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc which was created."
                }
            ],
            "description": "Event called when an npc instance was created through [[CreateNPC]].",
            "syntax": "OnNPCCreated(npc)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnNPCDestroyed": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc which was destroyed."
                }
            ],
            "description": "Event called when a NPC instance was destroyed through [[DestroyNPC]].",
            "syntax": "OnNPCDestroyed(npc)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnObjectStopMoving": {
            "params": [
                {
                    "name": "object",
                    "description": "The object which finished moving."
                }
            ],
            "description": "Event called when an object stops moving after [[SetObjectMoveTo]].",
            "syntax": "OnObjectStopMoving(object)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnObjectChangeDimension": {
            "params": [
                {
                    "name": "object",
                    "description": "The object which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when an object instance changes dimensions from [[SetObjectDimension]].",
            "syntax": "OnObjectChangeDimension(object, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnObjectCreated": {
            "params": [
                {
                    "name": "object",
                    "description": "The object which was created."
                }
            ],
            "description": "Event called when an object instance was created through [[CreateObject]].",
            "syntax": "OnObjectCreated(object)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnObjectDestroyed": {
            "params": [
                {
                    "name": "object",
                    "description": "The object which was destroyed."
                }
            ],
            "description": "Event called when an object instance was destroyed through [[DestroyObject]].",
            "syntax": "OnObjectDestroyed(object)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnObjectStreamIn": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier which streamed in."
                }
            ],
            "description": "Called when an object is streamed in from the serve",
            "syntax": "OnObjectStreamIn(object)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0/1.5.0"
            },
            "category": "Unknown"
        },
        "OnObjectStreamOut": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier which streamed out."
                }
            ],
            "description": "Called when an object is streamed out from the serve",
            "syntax": "OnObjectStreamOut(object)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0/1.5.0"
            },
            "category": "Unknown"
        },
        "OnPickupChangeDimension": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when a pickup instance changes dimensions from [[SetPickupDimension]].",
            "syntax": "OnPickupChangeDimension(pickup, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnPickupCreated": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup which was created."
                }
            ],
            "description": "Event called when an pickup instance was created through [[CreatePickup]].",
            "syntax": "OnPickupCreated(pickup)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnPickupDestroyed": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup which was destroyed."
                }
            ],
            "description": "Event called when a pickup instance was destroyed through [[DestroyPickup]].",
            "syntax": "OnPickupDestroyed(pickup)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnText3DChangeDimension": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when a text3d instance changes dimensions from [[SetText3DDimension]].",
            "syntax": "OnText3DChangeDimension(text3d, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnText3DCreated": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d which was created."
                }
            ],
            "description": "Event called when an text3d instance was created through [[CreateText3D]].",
            "syntax": "OnText3DCreated(text3d)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnText3DDestroyed": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d which was destroyed."
                }
            ],
            "description": "Event called when a text3d instance was destroyed through [[DestroyText3D]].",
            "syntax": "OnText3DDestroyed(text3d)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnDoorChangeDimension": {
            "params": [
                {
                    "name": "door",
                    "description": "The door which changed dimension."
                },
                {
                    "name": "old_dimension",
                    "description": "The old dimension."
                },
                {
                    "name": "new_dimension",
                    "description": "The new dimension."
                }
            ],
            "description": "Event called when a door instance changes dimensions from [[SetDoorDimension]].",
            "syntax": "OnDoorChangeDimension(door, old_dimension, new_dimension)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnDoorCreated": {
            "params": [
                {
                    "name": "door",
                    "description": "The door which was created."
                }
            ],
            "description": "Event called when an door instance was created through [[CreateDoor]].",
            "syntax": "OnDoorCreated(door)",
            "info": {
                "context": "Server",
                "introduced": "1.3.0"
            },
            "category": "Unknown"
        },
        "OnDoorDestroyed": {
            "params": [
                {
                    "name": "door",
                    "description": "The door which was destroyed."
                }
            ],
            "description": "Event called when a door instance was destroyed through [[DestroyDoor]].",
            "syntax": "OnDoorDestroyed(door)",
            "info": {
                "context": "Server",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        }
    },
    "client_events": {
        "OnGameTick": {
            "params": [
                {
                    "name": "DeltaSeconds",
                    "description": "Time in seconds that passed since the last tick."
                }
            ],
            "description": "Called on execution of the main thread. This is typically every frame (FPS) on clients. Tick rate on the server varies depending on the load. Use [[GetServerTickRate]] on the server to get that rate.",
            "syntax": "OnGameTick(DeltaSeconds)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnGameLanguageChange": {
            "params": [
                {
                    "name": "Language",
                    "description": "The new language as a string."
                }
            ],
            "description": "This function is called when the player changes their game language in the main menu.",
            "syntax": "OnGameLanguageChange(Language)",
            "info": {
                "context": "Client",
                "introduced": "1.5.0"
            },
            "category": "Unknown"
        },
        "OnSteamOverlayActivated": {
            "params": [
                {
                    "name": "bActive",
                    "description": "'''true''' if overlay is activated."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnSteamOverlayActivated(bActive)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnResolutionChange": {
            "params": [
                {
                    "name": "width",
                    "description": "New width (x) size."
                },
                {
                    "name": "height",
                    "description": "New height (y) size."
                }
            ],
            "description": "Called when the size of the game window changes. Either due to manual resizing or through settings.",
            "syntax": "OnResolutionChange(width, height)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnRenderHUD": {
            "params": [],
            "description": "This function is called every time the HUD is rendered for the player.  This function can be used as a game tick event.",
            "syntax": "OnRenderHUD()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnShowMainMenu": {
            "params": [],
            "description": "This function is called every time a player hides the main menu.",
            "syntax": "OnShowMainMenu()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnHideMainMenu": {
            "params": [],
            "description": "This function is called every time a player hides the main menu.",
            "syntax": "OnHideMainMenu()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnWhitelistAccepted": {
            "params": [
                {
                    "name": "domains",
                    "description": "A table containing the domains which the player allowed."
                }
            ],
            "description": "This function is called once the player has accepted the whitelist request.",
            "syntax": "OnWhitelistAccepted(domains)",
            "info": {
                "context": "Client",
                "introduced": "1.4.2"
            },
            "category": "Unknown"
        },
        "OnVehicleStreamIn": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle for the other player is streamed in."
                },
                {
                    "name": "player",
                    "description": "The player that streams in for vehicle."
                }
            ],
            "description": "Calls when a vehicle streams out of the streaming distance set in your [[server_config]] for a player.",
            "syntax": "OnVehicleStreamIn(vehicle, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleStreamOut": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle for the other player is streamed out."
                },
                {
                    "name": "player",
                    "description": "The player that streams out for vehicle."
                }
            ],
            "description": "Called when a vehicle is no longer streamed for a player. The stream distance is set through your [[server_config]].",
            "syntax": "OnVehicleStreamOut(vehicle, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStartEnterVehicle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "seat",
                    "description": "The vehicle seat in which the player tries to get in."
                }
            ],
            "description": "Called when a player presses the key to start entering a vehicle. You can return '''false''' in this event to stop the player from entering.",
            "syntax": "OnPlayerStartEnterVehicle(vehicle, seat)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStartExitVehicle": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Called when a player presses the key to start exiting a vehicle. You can return '''false''' in this event to stop the player from exiting.",
            "syntax": "OnPlayerStartExitVehicle(vehicle)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerEnterVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player is entering a vehicle."
                },
                {
                    "name": "vehicle",
                    "description": "The vehicle in which he is getting in."
                },
                {
                    "name": "seat",
                    "description": "The seat of the vehicle."
                }
            ],
            "description": "This event is called when a player enters a vehicle.",
            "syntax": "OnPlayerEnterVehicle(player, vehicle, seat)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerLeaveVehicle": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who leaves the vehicle."
                },
                {
                    "name": "vehicle",
                    "description": "The vehicle he is getting out of."
                },
                {
                    "name": "seat",
                    "description": "Vehicle seat the player gets out of."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerLeaveVehicle(player, vehicle, seat)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerToggleVehicleLight": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "toggle",
                    "description": "'''true''' if the player will turn on the light, '''false''' otherwise."
                }
            ],
            "description": "Called when a (local) player presses the key to switch the vehicle light on/off.",
            "syntax": "OnPlayerToggleVehicleLight(vehicle, toggle)",
            "info": {
                "context": "Client",
                "introduced": "1.1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerToggleVehicleNitro": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "toggle",
                    "description": "'''true''' if the player will turn on nitro, '''false''' otherwise."
                }
            ],
            "description": "Called when a (local) player presses the key to turn nitro on/off. You can return '''false''' to prevent turning it on. Requires [[AttachVehicleNitro]] to be enabled on the vehicle.",
            "syntax": "OnPlayerToggleVehicleNitro(vehicle, toggle)",
            "info": {
                "context": "Client",
                "introduced": "1.2.0"
            },
            "category": "Unknown"
        },
        "OnPlayerToggleVehicleHorn": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "toggle",
                    "description": "'''true''' if the player turns on the horn, '''false''' otherwise."
                }
            ],
            "description": "Called when a (local) player presses the key to turn the horn on/off. You can return '''false''' to prevent turning it on.",
            "syntax": "OnPlayerToggleVehicleHorn(vehicle, toggle)",
            "info": {
                "context": "Client",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnVehicleBackfire": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                }
            ],
            "description": "Called when a backfire effect is triggered on a vehicle.",
            "syntax": "OnVehicleBackfire(vehicle)",
            "info": {
                "context": "Client",
                "introduced": "1.2.0"
            },
            "category": "Unknown"
        },
        "OnPlayWeaponHitEffects": {
            "params": [
                {
                    "name": "PlayerId",
                    "description": "The player identifier."
                },
                {
                    "name": "Weapon",
                    "description": "The weapon instance."
                },
                {
                    "name": "HitType",
                    "description": "https://dev.playonset.com/wiki/HitType"
                },
                {
                    "name": "HitId",
                    "description": "The identifier of the hit entity."
                },
                {
                    "name": "StartLocation",
                    "description": "Trace start location of this bulet/hit."
                },
                {
                    "name": "HitLocation",
                    "description": "Trace hit location."
                },
                {
                    "name": "HitLocationRelative",
                    "description": "Hit location relative to the entity that was hit."
                },
                {
                    "name": "HitNormal",
                    "description": "Bullet impact normal."
                },
                {
                    "name": "HitResult",
                    "description": "Line trace result."
                }
            ],
            "description": "This event handles visual effects of weapons. The Weapons.lua contains a pre-configured event that shows the same visual hit effects as always. It is called for local and remote players. If it is called for remote players the parameters will contain the synced values from the other client.",
            "syntax": "OnPlayWeaponHitEffects(PlayerId, Weapon, HitType, HitId, StartLocation, HitLocation, HitLocationRelative, HitNormal, HitResult)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStreamIn": {
            "params": [
                {
                    "name": "player",
                    "description": "The player for the other player is streamed in."
                },
                {
                    "name": "otherplayer",
                    "description": "The player that streams in for player."
                }
            ],
            "description": "Called when another user is streamed in (rendered) for the player.",
            "syntax": "OnPlayerStreamIn(player, otherplayer)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerStreamOut": {
            "params": [
                {
                    "name": "player",
                    "description": "The player for the other player is streamed out."
                },
                {
                    "name": "otherplayer",
                    "description": "The player that streams out for player."
                }
            ],
            "description": "Called when a player streams out of the streaming distance set by [[server_config]] for another player.",
            "syntax": "OnPlayerStreamOut(player, otherplayer)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSwitchCamera": {
            "params": [
                {
                    "name": "bIsFirstPerson",
                    "description": "'''true''' if new mode is first person."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerSwitchCamera(bIsFirstPerson)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerEnterWater": {
            "params": [],
            "description": "Called when the local player enters water/starts swimming.",
            "syntax": "OnPlayerEnterWater()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerLeaveWater": {
            "params": [],
            "description": "This function is called when a player leaves the water.",
            "syntax": "OnPlayerLeaveWater()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerDeath": {
            "params": [
                {
                    "name": "player",
                    "description": "The player that has died."
                },
                {
                    "name": "instigator",
                    "description": "The player who is responsible for the death."
                }
            ],
            "description": "Calls when a player dies by any means possible. If the player wasn't killed by another player, instigator will be the same as the player.",
            "syntax": "OnPlayerDeath(player, instigator)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerChatCommand": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who has executed the command."
                },
                {
                    "name": "command",
                    "description": "The command name without slashes. For example: help"
                },
                {
                    "name": "exists",
                    "description": "'''false''' if the command is not bound by [[AddCommand]]. '''true''' if there is such handler."
                }
            ],
            "description": "Called when a player executes a command in the chat. See [[AddCommand]] to handle specific commands. You can return '''false''' in this event to prevent the command from being passed to it's handler.",
            "syntax": "OnPlayerChatCommand(player, command, exists)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerChat": {
            "params": [
                {
                    "name": "player",
                    "description": "The player who is texting in chat."
                },
                {
                    "name": "text",
                    "description": "Text committed by the player."
                }
            ],
            "description": "The event that gets called when you type a message in the chat.",
            "syntax": "OnPlayerChat(player, text)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSpawn": {
            "params": [
                {
                    "name": "playerid",
                    "description": "The player who has spawned."
                }
            ],
            "description": "Called when a player spawns. This usually happens after they died. Use [[SetPlayerRespawnTime]] to control how long it takes before they respawn.",
            "syntax": "OnPlayerSpawn(playerid)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerCrouch": {
            "params": [],
            "description": "Called when the local player starts crouching. Can be called by returning '''false'''.",
            "syntax": "OnPlayerCrouch()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerEndCrouch": {
            "params": [],
            "description": "Called when the local player stops crouching.",
            "syntax": "OnPlayerEndCrouch()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerEndFall": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerEndFall()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerFall": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerFall()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerTalking": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                }
            ],
            "description": "Called when a player starts talking via VoIP.",
            "syntax": "OnPlayerTalking(player)",
            "info": {
                "context": "Client",
                "introduced": "1.0.3"
            },
            "category": "Unknown"
        },
        "OnPlayerToggleAim": {
            "params": [
                {
                    "name": "toggle",
                    "description": "'''true''' if the player wants to aim, '''false''' otherwise."
                }
            ],
            "description": "Called when a (local) player presses the key to go in or out of the aim state. You can return '''false''' in this event to prevent the player from aimin",
            "syntax": "OnPlayerToggleAim(toggle)",
            "info": {
                "context": "Client",
                "introduced": "1.2.0"
            },
            "category": "Unknown"
        },
        "OnPlayerFootstep": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "floor_type",
                    "description": "The floor under their feet. Can be one of [[FloorTypes]]."
                }
            ],
            "description": "Called when a player hits the ground with their feet when walking/runnin",
            "syntax": "OnPlayerFootstep(player, floor_type)",
            "info": {
                "context": "Client",
                "introduced": "1.2.2"
            },
            "category": "Unknown"
        },
        "OnPlayerWeaponShot": {
            "params": [
                {
                    "name": "player",
                    "description": "The player that has shot the weapon."
                },
                {
                    "name": "weapon",
                    "description": "Weapon model id."
                },
                {
                    "name": "hittype",
                    "description": "The [[HitTy"
                },
                {
                    "name": "hitid",
                    "description": "The identifier of the entity which was hit."
                },
                {
                    "name": "hitX",
                    "description": "The X coordinate of this hit."
                },
                {
                    "name": "hitY",
                    "description": "The Y coordinate of this hit."
                },
                {
                    "name": "hitZ",
                    "description": "The Z coordinate of this hit."
                },
                {
                    "name": "startX",
                    "description": "The X coordinate of where this shot started from."
                },
                {
                    "name": "startY",
                    "description": "The Y coordinate of where this shot started from."
                },
                {
                    "name": "startZ",
                    "description": "The Z coordinate of where this shot started from."
                },
                {
                    "name": "normalX",
                    "description": "Impact normal X of the hit."
                },
                {
                    "name": "normalY",
                    "description": "Impact normal Y of the hit."
                },
                {
                    "name": "normalZ",
                    "description": "Impact normal Z of the hit."
                },
                {
                    "name": "BoneName",
                    "description": "Bone name of this hit. (For players)"
                }
            ],
            "description": "Called when a player has shot their weapon and the hit was authorized by the server but not yet processed its impact. You can call return '''false''' in this event to prevent this hit from further processing. (Server only)",
            "syntax": "OnPlayerWeaponShot(player, weapon, hittype, hitid, hitX, hitY, hitZ, startX, startY, startZ, normalX, normalY, normalZ, BoneName)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerReloaded": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerReloaded()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerParachuteLand": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerParachuteLand()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSkydiveCrash": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerSkydiveCrash()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerCancelSkydive": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerCancelSkydive()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerSkydive": {
            "params": [],
            "description": "Called when the player starts to skydive.",
            "syntax": "OnPlayerSkydive()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerParachuteOpen": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerParachuteOpen()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerParachuteClose": {
            "params": [],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerParachuteClose()",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnKeyPress": {
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key as a string."
                }
            ],
            "description": "Called when the player presses a key. You can use [[IsCtrlPressed]] and [[IsShiftPressed]] to check if it is a key combination.<br>Use [[OnKeyRelease]] to detect when they release the key.",
            "syntax": "OnKeyPress(key)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnKeyRelease": {
            "params": [
                {
                    "name": "key",
                    "description": "The released key as a string."
                }
            ],
            "description": "Called when the player releases a key. Use [[OnKeyPress]] to detect key down events.",
            "syntax": "OnKeyRelease(key)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnActionKey": {
            "params": [
                {
                    "name": "EventType",
                    "description": "The input event of type EInputEvent"
                },
                {
                    "name": "ActionName",
                    "description": "The name of the action. For example \"Jump\"."
                },
                {
                    "name": "KeyName",
                    "description": "The name of the key as a string."
                }
            ],
            "description": "Called when the player pressed a specific key that is an \"action\". For example the space-bar for jumpin",
            "syntax": "OnActionKey(EventType, ActionName, KeyName)",
            "info": {
                "context": "Client",
                "introduced": "1.5.5"
            },
            "category": "Unknown"
        },
        "OnAxisKey": {
            "params": [
                {
                    "name": "EventType",
                    "description": "The input event of type EInputEvent"
                },
                {
                    "name": "AxisName",
                    "description": "The name of the axis. For example \"Brake\" or \"MoveForward\"."
                },
                {
                    "name": "KeyName",
                    "description": "The name of the key as a string."
                }
            ],
            "description": "Called when the player pressed a specific key that is an \"action\". For example the space-bar for jumpin",
            "syntax": "OnAxisKey(EventType, AxisName, KeyName)",
            "info": {
                "context": "Client",
                "introduced": "1.5.5"
            },
            "category": "Unknown"
        },
        "OnNPCStreamIn": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC identifier for the other player is streamed in."
                },
                {
                    "name": "player",
                    "description": "The player that streams in for npc."
                }
            ],
            "description": "The event thats called when a NPC is streamed for a player.",
            "syntax": "OnNPCStreamIn(npc, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCStreamOut": {
            "params": [
                {
                    "name": "npc",
                    "description": "The NPC for the other player is streamed out."
                },
                {
                    "name": "player",
                    "description": "The player that streams out for npc."
                }
            ],
            "description": "Called when a NPC is streamed out from the server. ",
            "syntax": "OnNPCStreamOut(npc, player)",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnObjectStreamIn": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier which streamed in."
                }
            ],
            "description": "Called when an object is streamed in from the serve",
            "syntax": "OnObjectStreamIn(object)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0/1.5.0"
            },
            "category": "Unknown"
        },
        "OnObjectStreamOut": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier which streamed out."
                }
            ],
            "description": "Called when an object is streamed out from the serve",
            "syntax": "OnObjectStreamOut(object)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0/1.5.0"
            },
            "category": "Unknown"
        },
        "OnObjectHit": {
            "params": [
                {
                    "name": "object",
                    "description": "The object which was hit."
                },
                {
                    "name": "hittype",
                    "description": "The [[HitTy"
                },
                {
                    "name": "hitid",
                    "description": "The identifier of the entity which hit the object."
                },
                {
                    "name": "hitX",
                    "description": "The X coordinate of this hit."
                },
                {
                    "name": "hitY",
                    "description": "The Y coordinate of this hit."
                },
                {
                    "name": "hitZ",
                    "description": "The Z coordinate of this hit."
                },
                {
                    "name": "normalX",
                    "description": "Impact normal X of the hit."
                },
                {
                    "name": "normalY",
                    "description": "Impact normal Y of the hit."
                },
                {
                    "name": "normalZ",
                    "description": "Impact normal Z of the hit."
                }
            ],
            "description": "Called when something ''hits'' the object. Requires [[EnableObjectHitEvents]] to be called on the object before.",
            "syntax": "OnObjectHit(object, hittype, hitid, hitX, hitY, hitZ, normalX, normalY, normalZ)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerEndEditObject": {
            "params": [
                {
                    "name": "object",
                    "description": "The object being edited."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerEndEditObject(object)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerBeginEditObject": {
            "params": [
                {
                    "name": "object",
                    "description": "The object being edited."
                }
            ],
            "description": "__EDIT_ME__",
            "syntax": "OnPlayerBeginEditObject(object)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnObjectModelChange": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "model",
                    "description": "The new model identifier."
                }
            ],
            "description": "Called when the model of an object is changed by [[SetObjectModel]].",
            "syntax": "OnObjectModelChange(object, model)",
            "info": {
                "context": "Client",
                "introduced": "1.1.0"
            },
            "category": "Unknown"
        },
        "OnPackageStart": {
            "params": [],
            "description": "Package was started and its scripts loaded. Use this event to initialize your script. For instance connecting to a database.",
            "syntax": "OnPackageStart()",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPackageStop": {
            "params": [],
            "description": "Package is being stopped. Cleanup your allocated resources here. At this point all timers started by this package have been killed already. Also plugins were notified about the package unload.",
            "syntax": "OnPackageStop()",
            "info": {
                "context": "Server & Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnScriptError": {
            "params": [
                {
                    "name": "message",
                    "description": "The script error message."
                }
            ],
            "description": "Called when a script error occurs. On the client side, this is only called when the game was started with the '''-dev''' switch. Available on the sever side since version 1.0.3.",
            "syntax": "OnScriptError(message)",
            "info": {
                "context": "Client & Server",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPickupStreamIn": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier which streamed in."
                }
            ],
            "description": "This function is called when a player streams in the pickup.",
            "syntax": "OnPickupStreamIn(pickup)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPickupStreamOut": {
            "params": [
                {
                    "name": "pickup",
                    "description": "The pickup identifier which streamed in."
                }
            ],
            "description": "This function is called when a player streams out the pickup.",
            "syntax": "OnPickupStreamOut(pickup)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnText3DStreamIn": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier which streamed in."
                }
            ],
            "description": "This event is called when a player streams in the text 3d label.",
            "syntax": "OnText3DStreamIn(text3d)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnText3DStreamOut": {
            "params": [
                {
                    "name": "text3d",
                    "description": "The text3d identifier which streamed out."
                }
            ],
            "description": "Called when a text 3d label is streamed out from the server.",
            "syntax": "OnText3DStreamOut(text3d)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnWebLoadComplete": {
            "params": [
                {
                    "name": "web",
                    "description": "The identifier of the web browser."
                }
            ],
            "description": "Called when a web browser created by [[CreateWebUI]] is ready to use.",
            "syntax": "OnWebLoadComplete(web)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnSoundUpdateMeta": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                },
                {
                    "name": "meta",
                    "description": "The metadata received."
                }
            ],
            "description": "Called when new metadata was received from a network stream. (.pls playlist streams) This can be the name of the station, song, and artist.",
            "syntax": "OnSoundUpdateMeta(sound, meta)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnSoundFinished": {
            "params": [
                {
                    "name": "sound",
                    "description": "The sound identifier."
                }
            ],
            "description": "Called when a sound created by [[CreateSound]] or [[CreateSound3D]] stopped playing.",
            "syntax": "OnSoundFinished(sound)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnDoorStreamIn": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier which streamed in."
                }
            ],
            "description": "This event is called when a player streams in the door.",
            "syntax": "OnDoorStreamIn(door)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnDoorStreamOut": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier which streamed out."
                }
            ],
            "description": "Called when a door is streamed out from the server.",
            "syntax": "OnDoorStreamOut(door)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnObjectNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "object",
                    "description": "The object identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnObjectNetworkUpdatePropertyValue(object, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPlayerNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "player",
                    "description": "The player identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnPlayerNetworkUpdatePropertyValue(player, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnVehicleNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "vehicle",
                    "description": "The vehicle identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnVehicleNetworkUpdatePropertyValue(vehicle, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnNPCNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "npc",
                    "description": "The npc identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnNPCNetworkUpdatePropertyValue(npc, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnText3DNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "textId",
                    "description": "The text 3d identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnText3DNetworkUpdatePropertyValue(textId, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnPickupNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "pickupId",
                    "description": "The pickup identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnPickupNetworkUpdatePropertyValue(pickupId, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.0"
            },
            "category": "Unknown"
        },
        "OnDoorNetworkUpdatePropertyValue": {
            "params": [
                {
                    "name": "door",
                    "description": "The door identifier."
                },
                {
                    "name": "PropertyName",
                    "description": "The name of the property that has changed."
                },
                {
                    "name": "PropertyValue",
                    "description": "The new property value."
                }
            ],
            "description": "Called when a property value is updated from the network.",
            "syntax": "OnDoorNetworkUpdatePropertyValue(door, PropertyName, PropertyValue)",
            "info": {
                "context": "Client",
                "introduced": "1.1.0"
            },
          "category": "Unknown"
        }
    }
}